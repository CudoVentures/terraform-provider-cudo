// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RuleType rule type
//
// swagger:model RuleType
type RuleType string

func NewRuleType(value RuleType) *RuleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RuleType.
func (m RuleType) Pointer() *RuleType {
	return &m
}

const (

	// RuleTypeRULETYPEUNKNOWN captures enum value "RULE_TYPE_UNKNOWN"
	RuleTypeRULETYPEUNKNOWN RuleType = "RULE_TYPE_UNKNOWN"

	// RuleTypeRULETYPEINBOUND captures enum value "RULE_TYPE_INBOUND"
	RuleTypeRULETYPEINBOUND RuleType = "RULE_TYPE_INBOUND"

	// RuleTypeRULETYPEOUTBOUND captures enum value "RULE_TYPE_OUTBOUND"
	RuleTypeRULETYPEOUTBOUND RuleType = "RULE_TYPE_OUTBOUND"
)

// for schema
var ruleTypeEnum []interface{}

func init() {
	var res []RuleType
	if err := json.Unmarshal([]byte(`["RULE_TYPE_UNKNOWN","RULE_TYPE_INBOUND","RULE_TYPE_OUTBOUND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleTypeEnum = append(ruleTypeEnum, v)
	}
}

func (m RuleType) validateRuleTypeEnum(path, location string, value RuleType) error {
	if err := validate.EnumCase(path, location, value, ruleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rule type
func (m RuleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRuleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rule type based on context it is used
func (m RuleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
