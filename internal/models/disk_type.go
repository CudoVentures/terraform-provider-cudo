// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiskType disk type
//
// swagger:model DiskType
type DiskType string

func NewDiskType(value DiskType) *DiskType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DiskType.
func (m DiskType) Pointer() *DiskType {
	return &m
}

const (

	// DiskTypeDISKTYPEUNKNOWN captures enum value "DISK_TYPE_UNKNOWN"
	DiskTypeDISKTYPEUNKNOWN DiskType = "DISK_TYPE_UNKNOWN"

	// DiskTypeDISKTYPEBOOT captures enum value "DISK_TYPE_BOOT"
	DiskTypeDISKTYPEBOOT DiskType = "DISK_TYPE_BOOT"

	// DiskTypeDISKTYPESTORAGE captures enum value "DISK_TYPE_STORAGE"
	DiskTypeDISKTYPESTORAGE DiskType = "DISK_TYPE_STORAGE"
)

// for schema
var diskTypeEnum []interface{}

func init() {
	var res []DiskType
	if err := json.Unmarshal([]byte(`["DISK_TYPE_UNKNOWN","DISK_TYPE_BOOT","DISK_TYPE_STORAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskTypeEnum = append(diskTypeEnum, v)
	}
}

func (m DiskType) validateDiskTypeEnum(path, location string, value DiskType) error {
	if err := validate.EnumCase(path, location, value, diskTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this disk type
func (m DiskType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiskTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this disk type based on context it is used
func (m DiskType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
