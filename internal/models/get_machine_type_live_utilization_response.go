// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetMachineTypeLiveUtilizationResponse get machine type live utilization response
//
// swagger:model GetMachineTypeLiveUtilizationResponse
type GetMachineTypeLiveUtilizationResponse struct {

	// cpu utilization
	// Required: true
	CPUUtilization *float32 `json:"cpuUtilization"`

	// gpu free
	// Required: true
	GpuFree *int32 `json:"gpuFree"`

	// gpu total
	// Required: true
	GpuTotal *int32 `json:"gpuTotal"`

	// gpu used
	// Required: true
	GpuUsed *int32 `json:"gpuUsed"`

	// gpu utilization
	// Required: true
	GpuUtilization *float32 `json:"gpuUtilization"`

	// memory gib free
	// Required: true
	MemoryGibFree *int32 `json:"memoryGibFree"`

	// memory gib total
	// Required: true
	MemoryGibTotal *int32 `json:"memoryGibTotal"`

	// memory gib used
	// Required: true
	MemoryGibUsed *int32 `json:"memoryGibUsed"`

	// memory utilization
	// Required: true
	MemoryUtilization *float32 `json:"memoryUtilization"`

	// utilization
	// Required: true
	Utilization *float32 `json:"utilization"`

	// vcpu free
	// Required: true
	VcpuFree *int32 `json:"vcpuFree"`

	// vcpu total
	// Required: true
	VcpuTotal *int32 `json:"vcpuTotal"`

	// vcpu used
	// Required: true
	VcpuUsed *int32 `json:"vcpuUsed"`
}

// Validate validates this get machine type live utilization response
func (m *GetMachineTypeLiveUtilizationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUUtilization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuUtilization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryGibFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryGibTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryGibUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryUtilization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUtilization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuUsed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateCPUUtilization(formats strfmt.Registry) error {

	if err := validate.Required("cpuUtilization", "body", m.CPUUtilization); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateGpuFree(formats strfmt.Registry) error {

	if err := validate.Required("gpuFree", "body", m.GpuFree); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateGpuTotal(formats strfmt.Registry) error {

	if err := validate.Required("gpuTotal", "body", m.GpuTotal); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateGpuUsed(formats strfmt.Registry) error {

	if err := validate.Required("gpuUsed", "body", m.GpuUsed); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateGpuUtilization(formats strfmt.Registry) error {

	if err := validate.Required("gpuUtilization", "body", m.GpuUtilization); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateMemoryGibFree(formats strfmt.Registry) error {

	if err := validate.Required("memoryGibFree", "body", m.MemoryGibFree); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateMemoryGibTotal(formats strfmt.Registry) error {

	if err := validate.Required("memoryGibTotal", "body", m.MemoryGibTotal); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateMemoryGibUsed(formats strfmt.Registry) error {

	if err := validate.Required("memoryGibUsed", "body", m.MemoryGibUsed); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateMemoryUtilization(formats strfmt.Registry) error {

	if err := validate.Required("memoryUtilization", "body", m.MemoryUtilization); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateUtilization(formats strfmt.Registry) error {

	if err := validate.Required("utilization", "body", m.Utilization); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateVcpuFree(formats strfmt.Registry) error {

	if err := validate.Required("vcpuFree", "body", m.VcpuFree); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateVcpuTotal(formats strfmt.Registry) error {

	if err := validate.Required("vcpuTotal", "body", m.VcpuTotal); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeLiveUtilizationResponse) validateVcpuUsed(formats strfmt.Registry) error {

	if err := validate.Required("vcpuUsed", "body", m.VcpuUsed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get machine type live utilization response based on context it is used
func (m *GetMachineTypeLiveUtilizationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetMachineTypeLiveUtilizationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetMachineTypeLiveUtilizationResponse) UnmarshalBinary(b []byte) error {
	var res GetMachineTypeLiveUtilizationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
