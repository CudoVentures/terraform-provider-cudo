// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkBody create network body
//
// swagger:model CreateNetworkBody
type CreateNetworkBody struct {

	// cidr prefix
	// Required: true
	CidrPrefix *string `json:"cidrPrefix"`

	// data center Id
	// Required: true
	DataCenterID *string `json:"dataCenterId"`

	// id
	// Required: true
	ID *string `json:"id"`

	// vrouter size
	VrouterSize *V1VRouterSize `json:"vrouterSize,omitempty"`
}

// Validate validates this create network body
func (m *CreateNetworkBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidrPrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataCenterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVrouterSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateNetworkBody) validateCidrPrefix(formats strfmt.Registry) error {

	if err := validate.Required("cidrPrefix", "body", m.CidrPrefix); err != nil {
		return err
	}

	return nil
}

func (m *CreateNetworkBody) validateDataCenterID(formats strfmt.Registry) error {

	if err := validate.Required("dataCenterId", "body", m.DataCenterID); err != nil {
		return err
	}

	return nil
}

func (m *CreateNetworkBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CreateNetworkBody) validateVrouterSize(formats strfmt.Registry) error {
	if swag.IsZero(m.VrouterSize) { // not required
		return nil
	}

	if m.VrouterSize != nil {
		if err := m.VrouterSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vrouterSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vrouterSize")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network body based on the context it is used
func (m *CreateNetworkBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVrouterSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateNetworkBody) contextValidateVrouterSize(ctx context.Context, formats strfmt.Registry) error {

	if m.VrouterSize != nil {

		if swag.IsZero(m.VrouterSize) { // not required
			return nil
		}

		if err := m.VrouterSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vrouterSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vrouterSize")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateNetworkBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateNetworkBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
