// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataCenterRevenueResource data center revenue resource
//
// swagger:model DataCenterRevenueResource
type DataCenterRevenueResource struct {

	// quantity
	// Required: true
	Quantity *Decimal `json:"quantity"`

	// resource Id
	// Required: true
	ResourceID *string `json:"resourceId"`

	// resource type
	// Required: true
	ResourceType *string `json:"resourceType"`

	// revenue usd
	// Required: true
	RevenueUsd *Decimal `json:"revenueUsd"`

	// unit
	// Required: true
	Unit *string `json:"unit"`
}

// Validate validates this data center revenue resource
func (m *DataCenterRevenueResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevenueUsd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataCenterRevenueResource) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if m.Quantity != nil {
		if err := m.Quantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quantity")
			}
			return err
		}
	}

	return nil
}

func (m *DataCenterRevenueResource) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resourceId", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *DataCenterRevenueResource) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *DataCenterRevenueResource) validateRevenueUsd(formats strfmt.Registry) error {

	if err := validate.Required("revenueUsd", "body", m.RevenueUsd); err != nil {
		return err
	}

	if m.RevenueUsd != nil {
		if err := m.RevenueUsd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revenueUsd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revenueUsd")
			}
			return err
		}
	}

	return nil
}

func (m *DataCenterRevenueResource) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data center revenue resource based on the context it is used
func (m *DataCenterRevenueResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevenueUsd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataCenterRevenueResource) contextValidateQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.Quantity != nil {

		if err := m.Quantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quantity")
			}
			return err
		}
	}

	return nil
}

func (m *DataCenterRevenueResource) contextValidateRevenueUsd(ctx context.Context, formats strfmt.Registry) error {

	if m.RevenueUsd != nil {

		if err := m.RevenueUsd.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revenueUsd")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revenueUsd")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataCenterRevenueResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataCenterRevenueResource) UnmarshalBinary(b []byte) error {
	var res DataCenterRevenueResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
