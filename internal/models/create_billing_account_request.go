// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBillingAccountRequest create billing account request
//
// swagger:model CreateBillingAccountRequest
type CreateBillingAccountRequest struct {

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// email
	// Required: true
	Email *string `json:"email"`

	// invoice name
	// Required: true
	InvoiceName *string `json:"invoiceName"`

	// referral
	Referral string `json:"referral,omitempty"`

	// tax ids
	TaxIds []*TaxID `json:"taxIds"`
}

// Validate validates this create billing account request
func (m *CreateBillingAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingAccountRequest) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *CreateBillingAccountRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *CreateBillingAccountRequest) validateInvoiceName(formats strfmt.Registry) error {

	if err := validate.Required("invoiceName", "body", m.InvoiceName); err != nil {
		return err
	}

	return nil
}

func (m *CreateBillingAccountRequest) validateTaxIds(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxIds) { // not required
		return nil
	}

	for i := 0; i < len(m.TaxIds); i++ {
		if swag.IsZero(m.TaxIds[i]) { // not required
			continue
		}

		if m.TaxIds[i] != nil {
			if err := m.TaxIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create billing account request based on the context it is used
func (m *CreateBillingAccountRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaxIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingAccountRequest) contextValidateTaxIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaxIds); i++ {

		if m.TaxIds[i] != nil {

			if swag.IsZero(m.TaxIds[i]) { // not required
				return nil
			}

			if err := m.TaxIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingAccountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingAccountRequest) UnmarshalBinary(b []byte) error {
	var res CreateBillingAccountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
