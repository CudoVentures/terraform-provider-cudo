// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkState network state
//
// swagger:model NetworkState
type NetworkState string

func NewNetworkState(value NetworkState) *NetworkState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetworkState.
func (m NetworkState) Pointer() *NetworkState {
	return &m
}

const (

	// NetworkStateCLONING captures enum value "CLONING"
	NetworkStateCLONING NetworkState = "CLONING"

	// NetworkStateCREATINGSNAPSHOT captures enum value "CREATING_SNAPSHOT"
	NetworkStateCREATINGSNAPSHOT NetworkState = "CREATING_SNAPSHOT"

	// NetworkStateDELETED captures enum value "DELETED"
	NetworkStateDELETED NetworkState = "DELETED"

	// NetworkStateDELETING captures enum value "DELETING"
	NetworkStateDELETING NetworkState = "DELETING"

	// NetworkStateDELETINGSNAPSHOT captures enum value "DELETING_SNAPSHOT"
	NetworkStateDELETINGSNAPSHOT NetworkState = "DELETING_SNAPSHOT"

	// NetworkStateFAILED captures enum value "FAILED"
	NetworkStateFAILED NetworkState = "FAILED"

	// NetworkStateHOTPLUGGING captures enum value "HOTPLUGGING"
	NetworkStateHOTPLUGGING NetworkState = "HOTPLUGGING"

	// NetworkStateMIGRATING captures enum value "MIGRATING"
	NetworkStateMIGRATING NetworkState = "MIGRATING"

	// NetworkStateRECREATING captures enum value "RECREATING"
	NetworkStateRECREATING NetworkState = "RECREATING"

	// NetworkStateREVERTINGSNAPSHOT captures enum value "REVERTING_SNAPSHOT"
	NetworkStateREVERTINGSNAPSHOT NetworkState = "REVERTING_SNAPSHOT"

	// NetworkStateRESIZING captures enum value "RESIZING"
	NetworkStateRESIZING NetworkState = "RESIZING"

	// NetworkStateRESIZINGDISK captures enum value "RESIZING_DISK"
	NetworkStateRESIZINGDISK NetworkState = "RESIZING_DISK"

	// NetworkStateACTIVE captures enum value "ACTIVE"
	NetworkStateACTIVE NetworkState = "ACTIVE"

	// NetworkStateSTARTING captures enum value "STARTING"
	NetworkStateSTARTING NetworkState = "STARTING"

	// NetworkStateSTOPPED captures enum value "STOPPED"
	NetworkStateSTOPPED NetworkState = "STOPPED"

	// NetworkStateSTOPPING captures enum value "STOPPING"
	NetworkStateSTOPPING NetworkState = "STOPPING"

	// NetworkStateSUSPENDED captures enum value "SUSPENDED"
	NetworkStateSUSPENDED NetworkState = "SUSPENDED"

	// NetworkStateSUSPENDING captures enum value "SUSPENDING"
	NetworkStateSUSPENDING NetworkState = "SUSPENDING"

	// NetworkStateUNKNOWN captures enum value "UNKNOWN"
	NetworkStateUNKNOWN NetworkState = "UNKNOWN"
)

// for schema
var networkStateEnum []interface{}

func init() {
	var res []NetworkState
	if err := json.Unmarshal([]byte(`["CLONING","CREATING_SNAPSHOT","DELETED","DELETING","DELETING_SNAPSHOT","FAILED","HOTPLUGGING","MIGRATING","RECREATING","REVERTING_SNAPSHOT","RESIZING","RESIZING_DISK","ACTIVE","STARTING","STOPPED","STOPPING","SUSPENDED","SUSPENDING","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkStateEnum = append(networkStateEnum, v)
	}
}

func (m NetworkState) validateNetworkStateEnum(path, location string, value NetworkState) error {
	if err := validate.EnumCase(path, location, value, networkStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network state
func (m NetworkState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this network state based on context it is used
func (m NetworkState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
