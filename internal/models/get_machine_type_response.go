// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetMachineTypeResponse get machine type response
//
// swagger:model GetMachineTypeResponse
type GetMachineTypeResponse struct {

	// count clusters
	// Required: true
	CountClusters *int32 `json:"countClusters"`

	// count hosts
	// Required: true
	CountHosts *int32 `json:"countHosts"`

	// count hosts active
	// Required: true
	CountHostsActive *int32 `json:"countHostsActive"`

	// count hosts inactive
	// Required: true
	CountHostsInactive *int32 `json:"countHostsInactive"`

	// cpu models
	// Required: true
	CPUModels []string `json:"cpuModels"`

	// data center Id
	// Required: true
	DataCenterID *string `json:"dataCenterId"`

	// gpu models
	// Required: true
	GpuModels []string `json:"gpuModels"`

	// machine type
	// Required: true
	MachineType *string `json:"machineType"`

	// max gpu price hr
	// Required: true
	MaxGpuPriceHr *Decimal `json:"maxGpuPriceHr"`

	// max memory gib price hr
	// Required: true
	MaxMemoryGibPriceHr *Decimal `json:"maxMemoryGibPriceHr"`

	// max vcpu per gpu
	// Required: true
	MaxVcpuPerGpu *float64 `json:"maxVcpuPerGpu"`

	// max vcpu per memory gib
	// Required: true
	MaxVcpuPerMemoryGib *float64 `json:"maxVcpuPerMemoryGib"`

	// max vcpu price hr
	// Required: true
	MaxVcpuPriceHr *Decimal `json:"maxVcpuPriceHr"`

	// min gpu price hr
	// Required: true
	MinGpuPriceHr *Decimal `json:"minGpuPriceHr"`

	// min memory gib price hr
	// Required: true
	MinMemoryGibPriceHr *Decimal `json:"minMemoryGibPriceHr"`

	// min vcpu per gpu
	// Required: true
	MinVcpuPerGpu *float64 `json:"minVcpuPerGpu"`

	// min vcpu per memory gib
	// Required: true
	MinVcpuPerMemoryGib *float64 `json:"minVcpuPerMemoryGib"`

	// min vcpu price hr
	// Required: true
	MinVcpuPriceHr *Decimal `json:"minVcpuPriceHr"`
}

// Validate validates this get machine type response
func (m *GetMachineTypeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountHostsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountHostsInactive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataCenterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxGpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMemoryGibPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVcpuPerGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVcpuPerMemoryGib(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVcpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinGpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMemoryGibPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinVcpuPerGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinVcpuPerMemoryGib(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinVcpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetMachineTypeResponse) validateCountClusters(formats strfmt.Registry) error {

	if err := validate.Required("countClusters", "body", m.CountClusters); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateCountHosts(formats strfmt.Registry) error {

	if err := validate.Required("countHosts", "body", m.CountHosts); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateCountHostsActive(formats strfmt.Registry) error {

	if err := validate.Required("countHostsActive", "body", m.CountHostsActive); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateCountHostsInactive(formats strfmt.Registry) error {

	if err := validate.Required("countHostsInactive", "body", m.CountHostsInactive); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateCPUModels(formats strfmt.Registry) error {

	if err := validate.Required("cpuModels", "body", m.CPUModels); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateDataCenterID(formats strfmt.Registry) error {

	if err := validate.Required("dataCenterId", "body", m.DataCenterID); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateGpuModels(formats strfmt.Registry) error {

	if err := validate.Required("gpuModels", "body", m.GpuModels); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMachineType(formats strfmt.Registry) error {

	if err := validate.Required("machineType", "body", m.MachineType); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMaxGpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("maxGpuPriceHr", "body", m.MaxGpuPriceHr); err != nil {
		return err
	}

	if m.MaxGpuPriceHr != nil {
		if err := m.MaxGpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxGpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxGpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMaxMemoryGibPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("maxMemoryGibPriceHr", "body", m.MaxMemoryGibPriceHr); err != nil {
		return err
	}

	if m.MaxMemoryGibPriceHr != nil {
		if err := m.MaxMemoryGibPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxMemoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxMemoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMaxVcpuPerGpu(formats strfmt.Registry) error {

	if err := validate.Required("maxVcpuPerGpu", "body", m.MaxVcpuPerGpu); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMaxVcpuPerMemoryGib(formats strfmt.Registry) error {

	if err := validate.Required("maxVcpuPerMemoryGib", "body", m.MaxVcpuPerMemoryGib); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMaxVcpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("maxVcpuPriceHr", "body", m.MaxVcpuPriceHr); err != nil {
		return err
	}

	if m.MaxVcpuPriceHr != nil {
		if err := m.MaxVcpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxVcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxVcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMinGpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("minGpuPriceHr", "body", m.MinGpuPriceHr); err != nil {
		return err
	}

	if m.MinGpuPriceHr != nil {
		if err := m.MinGpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minGpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minGpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMinMemoryGibPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("minMemoryGibPriceHr", "body", m.MinMemoryGibPriceHr); err != nil {
		return err
	}

	if m.MinMemoryGibPriceHr != nil {
		if err := m.MinMemoryGibPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minMemoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minMemoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMinVcpuPerGpu(formats strfmt.Registry) error {

	if err := validate.Required("minVcpuPerGpu", "body", m.MinVcpuPerGpu); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMinVcpuPerMemoryGib(formats strfmt.Registry) error {

	if err := validate.Required("minVcpuPerMemoryGib", "body", m.MinVcpuPerMemoryGib); err != nil {
		return err
	}

	return nil
}

func (m *GetMachineTypeResponse) validateMinVcpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("minVcpuPriceHr", "body", m.MinVcpuPriceHr); err != nil {
		return err
	}

	if m.MinVcpuPriceHr != nil {
		if err := m.MinVcpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minVcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minVcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get machine type response based on the context it is used
func (m *GetMachineTypeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaxGpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxMemoryGibPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxVcpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinGpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMemoryGibPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinVcpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetMachineTypeResponse) contextValidateMaxGpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxGpuPriceHr != nil {

		if err := m.MaxGpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxGpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxGpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) contextValidateMaxMemoryGibPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxMemoryGibPriceHr != nil {

		if err := m.MaxMemoryGibPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxMemoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxMemoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) contextValidateMaxVcpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxVcpuPriceHr != nil {

		if err := m.MaxVcpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxVcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxVcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) contextValidateMinGpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MinGpuPriceHr != nil {

		if err := m.MinGpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minGpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minGpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) contextValidateMinMemoryGibPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMemoryGibPriceHr != nil {

		if err := m.MinMemoryGibPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minMemoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minMemoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *GetMachineTypeResponse) contextValidateMinVcpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MinVcpuPriceHr != nil {

		if err := m.MinVcpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minVcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minVcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetMachineTypeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetMachineTypeResponse) UnmarshalBinary(b []byte) error {
	var res GetMachineTypeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
