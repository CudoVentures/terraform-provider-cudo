// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Unit unit
//
// swagger:model Unit
type Unit string

func NewUnit(value Unit) *Unit {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Unit.
func (m Unit) Pointer() *Unit {
	return &m
}

const (

	// UnitUNITUNKNOWN captures enum value "UNIT_UNKNOWN"
	UnitUNITUNKNOWN Unit = "UNIT_UNKNOWN"

	// UnitUNITGIBHOUR captures enum value "UNIT_GIB_HOUR"
	UnitUNITGIBHOUR Unit = "UNIT_GIB_HOUR"

	// UnitUNITHOUR captures enum value "UNIT_HOUR"
	UnitUNITHOUR Unit = "UNIT_HOUR"
)

// for schema
var unitEnum []interface{}

func init() {
	var res []Unit
	if err := json.Unmarshal([]byte(`["UNIT_UNKNOWN","UNIT_GIB_HOUR","UNIT_HOUR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unitEnum = append(unitEnum, v)
	}
}

func (m Unit) validateUnitEnum(path, location string, value Unit) error {
	if err := validate.EnumCase(path, location, value, unitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this unit
func (m Unit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this unit based on context it is used
func (m Unit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
