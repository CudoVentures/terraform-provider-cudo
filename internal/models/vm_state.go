// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMState Vm state
//
// swagger:model VmState
type VMState string

func NewVMState(value VMState) *VMState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VMState.
func (m VMState) Pointer() *VMState {
	return &m
}

const (

	// VMStateCLONING captures enum value "CLONING"
	VMStateCLONING VMState = "CLONING"

	// VMStateCREATINGSNAPSHOT captures enum value "CREATING_SNAPSHOT"
	VMStateCREATINGSNAPSHOT VMState = "CREATING_SNAPSHOT"

	// VMStateDELETED captures enum value "DELETED"
	VMStateDELETED VMState = "DELETED"

	// VMStateDELETING captures enum value "DELETING"
	VMStateDELETING VMState = "DELETING"

	// VMStateDELETINGSNAPSHOT captures enum value "DELETING_SNAPSHOT"
	VMStateDELETINGSNAPSHOT VMState = "DELETING_SNAPSHOT"

	// VMStateFAILED captures enum value "FAILED"
	VMStateFAILED VMState = "FAILED"

	// VMStateHOTPLUGGING captures enum value "HOTPLUGGING"
	VMStateHOTPLUGGING VMState = "HOTPLUGGING"

	// VMStateMIGRATING captures enum value "MIGRATING"
	VMStateMIGRATING VMState = "MIGRATING"

	// VMStateRECREATING captures enum value "RECREATING"
	VMStateRECREATING VMState = "RECREATING"

	// VMStateREVERTINGSNAPSHOT captures enum value "REVERTING_SNAPSHOT"
	VMStateREVERTINGSNAPSHOT VMState = "REVERTING_SNAPSHOT"

	// VMStateRESIZING captures enum value "RESIZING"
	VMStateRESIZING VMState = "RESIZING"

	// VMStateRESIZINGDISK captures enum value "RESIZING_DISK"
	VMStateRESIZINGDISK VMState = "RESIZING_DISK"

	// VMStateACTIVE captures enum value "ACTIVE"
	VMStateACTIVE VMState = "ACTIVE"

	// VMStateSTARTING captures enum value "STARTING"
	VMStateSTARTING VMState = "STARTING"

	// VMStateSTOPPED captures enum value "STOPPED"
	VMStateSTOPPED VMState = "STOPPED"

	// VMStateSTOPPING captures enum value "STOPPING"
	VMStateSTOPPING VMState = "STOPPING"

	// VMStateSUSPENDED captures enum value "SUSPENDED"
	VMStateSUSPENDED VMState = "SUSPENDED"

	// VMStateSUSPENDING captures enum value "SUSPENDING"
	VMStateSUSPENDING VMState = "SUSPENDING"

	// VMStateUNKNOWN captures enum value "UNKNOWN"
	VMStateUNKNOWN VMState = "UNKNOWN"
)

// for schema
var vmStateEnum []interface{}

func init() {
	var res []VMState
	if err := json.Unmarshal([]byte(`["CLONING","CREATING_SNAPSHOT","DELETED","DELETING","DELETING_SNAPSHOT","FAILED","HOTPLUGGING","MIGRATING","RECREATING","REVERTING_SNAPSHOT","RESIZING","RESIZING_DISK","ACTIVE","STARTING","STOPPED","STOPPING","SUSPENDED","SUSPENDING","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmStateEnum = append(vmStateEnum, v)
	}
}

func (m VMState) validateVMStateEnum(path, location string, value VMState) error {
	if err := validate.EnumCase(path, location, value, vmStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm state
func (m VMState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm state based on context it is used
func (m VMState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
