// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Protocol protocol
//
// swagger:model Protocol
type Protocol string

func NewProtocol(value Protocol) *Protocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Protocol.
func (m Protocol) Pointer() *Protocol {
	return &m
}

const (

	// ProtocolPROTOCOLUNKNOWN captures enum value "PROTOCOL_UNKNOWN"
	ProtocolPROTOCOLUNKNOWN Protocol = "PROTOCOL_UNKNOWN"

	// ProtocolPROTOCOLALL captures enum value "PROTOCOL_ALL"
	ProtocolPROTOCOLALL Protocol = "PROTOCOL_ALL"

	// ProtocolPROTOCOLTCP captures enum value "PROTOCOL_TCP"
	ProtocolPROTOCOLTCP Protocol = "PROTOCOL_TCP"

	// ProtocolPROTOCOLUDP captures enum value "PROTOCOL_UDP"
	ProtocolPROTOCOLUDP Protocol = "PROTOCOL_UDP"

	// ProtocolPROTOCOLICMP captures enum value "PROTOCOL_ICMP"
	ProtocolPROTOCOLICMP Protocol = "PROTOCOL_ICMP"

	// ProtocolPROTOCOLICMPv6 captures enum value "PROTOCOL_ICMPv6"
	ProtocolPROTOCOLICMPv6 Protocol = "PROTOCOL_ICMPv6"

	// ProtocolPROTOCOLIPSEC captures enum value "PROTOCOL_IPSEC"
	ProtocolPROTOCOLIPSEC Protocol = "PROTOCOL_IPSEC"
)

// for schema
var protocolEnum []interface{}

func init() {
	var res []Protocol
	if err := json.Unmarshal([]byte(`["PROTOCOL_UNKNOWN","PROTOCOL_ALL","PROTOCOL_TCP","PROTOCOL_UDP","PROTOCOL_ICMP","PROTOCOL_ICMPv6","PROTOCOL_IPSEC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protocolEnum = append(protocolEnum, v)
	}
}

func (m Protocol) validateProtocolEnum(path, location string, value Protocol) error {
	if err := validate.EnumCase(path, location, value, protocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this protocol
func (m Protocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this protocol based on context it is used
func (m Protocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
