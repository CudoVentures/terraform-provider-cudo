// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMMachineType VM machine type
//
// swagger:model VMMachineType
type VMMachineType struct {

	// cpu model
	// Required: true
	CPUModel *string `json:"cpuModel"`

	// data center Id
	// Required: true
	DataCenterID *string `json:"dataCenterId"`

	// gpu model
	// Required: true
	GpuModel *string `json:"gpuModel"`

	// gpu model Id
	// Required: true
	GpuModelID *string `json:"gpuModelId"`

	// gpu price hr
	// Required: true
	GpuPriceHr *Decimal `json:"gpuPriceHr"`

	// ipv4 price hr
	// Required: true
	IPV4PriceHr *Decimal `json:"ipv4PriceHr"`

	// machine type
	// Required: true
	MachineType *string `json:"machineType"`

	// max gpu free
	// Required: true
	MaxGpuFree *int32 `json:"maxGpuFree"`

	// max memory gib free
	// Required: true
	MaxMemoryGibFree *int32 `json:"maxMemoryGibFree"`

	// max storage gib free
	// Required: true
	MaxStorageGibFree *int32 `json:"maxStorageGibFree"`

	// max vcpu free
	// Required: true
	MaxVcpuFree *int32 `json:"maxVcpuFree"`

	// max vcpu per gpu
	// Required: true
	MaxVcpuPerGpu *float64 `json:"maxVcpuPerGpu"`

	// max vcpu per memory gib
	// Required: true
	MaxVcpuPerMemoryGib *float64 `json:"maxVcpuPerMemoryGib"`

	// memory gib price hr
	// Required: true
	MemoryGibPriceHr *Decimal `json:"memoryGibPriceHr"`

	// min storage gib price hr
	// Required: true
	MinStorageGibPriceHr *Decimal `json:"minStorageGibPriceHr"`

	// min vcpu per gpu
	// Required: true
	MinVcpuPerGpu *float64 `json:"minVcpuPerGpu"`

	// min vcpu per memory gib
	// Required: true
	MinVcpuPerMemoryGib *float64 `json:"minVcpuPerMemoryGib"`

	// renewable energy
	// Required: true
	RenewableEnergy *bool `json:"renewableEnergy"`

	// total gpu free
	// Required: true
	TotalGpuFree *int32 `json:"totalGpuFree"`

	// total memory gib free
	// Required: true
	TotalMemoryGibFree *int32 `json:"totalMemoryGibFree"`

	// total storage gib free
	// Required: true
	TotalStorageGibFree *int32 `json:"totalStorageGibFree"`

	// total vcpu free
	// Required: true
	TotalVcpuFree *int32 `json:"totalVcpuFree"`

	// vcpu price hr
	// Required: true
	VcpuPriceHr *Decimal `json:"vcpuPriceHr"`
}

// Validate validates this VM machine type
func (m *VMMachineType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataCenterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuModelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4PriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxGpuFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMemoryGibFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxStorageGibFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVcpuFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVcpuPerGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVcpuPerMemoryGib(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryGibPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinStorageGibPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinVcpuPerGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinVcpuPerMemoryGib(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenewableEnergy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalGpuFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMemoryGibFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalStorageGibFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalVcpuFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMMachineType) validateCPUModel(formats strfmt.Registry) error {

	if err := validate.Required("cpuModel", "body", m.CPUModel); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateDataCenterID(formats strfmt.Registry) error {

	if err := validate.Required("dataCenterId", "body", m.DataCenterID); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateGpuModel(formats strfmt.Registry) error {

	if err := validate.Required("gpuModel", "body", m.GpuModel); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateGpuModelID(formats strfmt.Registry) error {

	if err := validate.Required("gpuModelId", "body", m.GpuModelID); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateGpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("gpuPriceHr", "body", m.GpuPriceHr); err != nil {
		return err
	}

	if m.GpuPriceHr != nil {
		if err := m.GpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMMachineType) validateIPV4PriceHr(formats strfmt.Registry) error {

	if err := validate.Required("ipv4PriceHr", "body", m.IPV4PriceHr); err != nil {
		return err
	}

	if m.IPV4PriceHr != nil {
		if err := m.IPV4PriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4PriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4PriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMMachineType) validateMachineType(formats strfmt.Registry) error {

	if err := validate.Required("machineType", "body", m.MachineType); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateMaxGpuFree(formats strfmt.Registry) error {

	if err := validate.Required("maxGpuFree", "body", m.MaxGpuFree); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateMaxMemoryGibFree(formats strfmt.Registry) error {

	if err := validate.Required("maxMemoryGibFree", "body", m.MaxMemoryGibFree); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateMaxStorageGibFree(formats strfmt.Registry) error {

	if err := validate.Required("maxStorageGibFree", "body", m.MaxStorageGibFree); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateMaxVcpuFree(formats strfmt.Registry) error {

	if err := validate.Required("maxVcpuFree", "body", m.MaxVcpuFree); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateMaxVcpuPerGpu(formats strfmt.Registry) error {

	if err := validate.Required("maxVcpuPerGpu", "body", m.MaxVcpuPerGpu); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateMaxVcpuPerMemoryGib(formats strfmt.Registry) error {

	if err := validate.Required("maxVcpuPerMemoryGib", "body", m.MaxVcpuPerMemoryGib); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateMemoryGibPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("memoryGibPriceHr", "body", m.MemoryGibPriceHr); err != nil {
		return err
	}

	if m.MemoryGibPriceHr != nil {
		if err := m.MemoryGibPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMMachineType) validateMinStorageGibPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("minStorageGibPriceHr", "body", m.MinStorageGibPriceHr); err != nil {
		return err
	}

	if m.MinStorageGibPriceHr != nil {
		if err := m.MinStorageGibPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minStorageGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minStorageGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMMachineType) validateMinVcpuPerGpu(formats strfmt.Registry) error {

	if err := validate.Required("minVcpuPerGpu", "body", m.MinVcpuPerGpu); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateMinVcpuPerMemoryGib(formats strfmt.Registry) error {

	if err := validate.Required("minVcpuPerMemoryGib", "body", m.MinVcpuPerMemoryGib); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateRenewableEnergy(formats strfmt.Registry) error {

	if err := validate.Required("renewableEnergy", "body", m.RenewableEnergy); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateTotalGpuFree(formats strfmt.Registry) error {

	if err := validate.Required("totalGpuFree", "body", m.TotalGpuFree); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateTotalMemoryGibFree(formats strfmt.Registry) error {

	if err := validate.Required("totalMemoryGibFree", "body", m.TotalMemoryGibFree); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateTotalStorageGibFree(formats strfmt.Registry) error {

	if err := validate.Required("totalStorageGibFree", "body", m.TotalStorageGibFree); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateTotalVcpuFree(formats strfmt.Registry) error {

	if err := validate.Required("totalVcpuFree", "body", m.TotalVcpuFree); err != nil {
		return err
	}

	return nil
}

func (m *VMMachineType) validateVcpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("vcpuPriceHr", "body", m.VcpuPriceHr); err != nil {
		return err
	}

	if m.VcpuPriceHr != nil {
		if err := m.VcpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this VM machine type based on the context it is used
func (m *VMMachineType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4PriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemoryGibPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinStorageGibPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMMachineType) contextValidateGpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.GpuPriceHr != nil {

		if err := m.GpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMMachineType) contextValidateIPV4PriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV4PriceHr != nil {

		if err := m.IPV4PriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4PriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4PriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMMachineType) contextValidateMemoryGibPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MemoryGibPriceHr != nil {

		if err := m.MemoryGibPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMMachineType) contextValidateMinStorageGibPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MinStorageGibPriceHr != nil {

		if err := m.MinStorageGibPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minStorageGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minStorageGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMMachineType) contextValidateVcpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.VcpuPriceHr != nil {

		if err := m.VcpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMMachineType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMMachineType) UnmarshalBinary(b []byte) error {
	var res VMMachineType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
