// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Host host
//
// swagger:model Host
type Host struct {

	// cpu model
	// Required: true
	CPUModel *string `json:"cpuModel"`

	// create time
	// Required: true
	// Format: date-time
	CreateTime *strfmt.DateTime `json:"createTime"`

	// gpu free
	// Required: true
	GpuFree *int32 `json:"gpuFree"`

	// gpu model
	// Required: true
	GpuModel *string `json:"gpuModel"`

	// gpu model Id
	// Required: true
	GpuModelID *string `json:"gpuModelId"`

	// gpu used
	// Required: true
	GpuUsed *int32 `json:"gpuUsed"`

	// machine type
	// Required: true
	MachineType *string `json:"machineType"`

	// memory gib free
	// Required: true
	MemoryGibFree *int32 `json:"memoryGibFree"`

	// memory gib used
	// Required: true
	MemoryGibUsed *int32 `json:"memoryGibUsed"`

	// name
	// Required: true
	Name *string `json:"name"`

	// online
	// Required: true
	Online *bool `json:"online"`

	// update time
	// Required: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"updateTime"`

	// vcpu free
	// Required: true
	VcpuFree *int32 `json:"vcpuFree"`

	// vcpu per Cpu thread
	// Required: true
	VcpuPerCPUThread *int32 `json:"vcpuPerCpuThread"`

	// vcpu used
	// Required: true
	VcpuUsed *int32 `json:"vcpuUsed"`

	// vm count
	// Required: true
	VMCount *int32 `json:"vmCount"`
}

// Validate validates this host
func (m *Host) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuModelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryGibFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryGibUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuFree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuPerCPUThread(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Host) validateCPUModel(formats strfmt.Registry) error {

	if err := validate.Required("cpuModel", "body", m.CPUModel); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("createTime", "body", m.CreateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateGpuFree(formats strfmt.Registry) error {

	if err := validate.Required("gpuFree", "body", m.GpuFree); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateGpuModel(formats strfmt.Registry) error {

	if err := validate.Required("gpuModel", "body", m.GpuModel); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateGpuModelID(formats strfmt.Registry) error {

	if err := validate.Required("gpuModelId", "body", m.GpuModelID); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateGpuUsed(formats strfmt.Registry) error {

	if err := validate.Required("gpuUsed", "body", m.GpuUsed); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateMachineType(formats strfmt.Registry) error {

	if err := validate.Required("machineType", "body", m.MachineType); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateMemoryGibFree(formats strfmt.Registry) error {

	if err := validate.Required("memoryGibFree", "body", m.MemoryGibFree); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateMemoryGibUsed(formats strfmt.Registry) error {

	if err := validate.Required("memoryGibUsed", "body", m.MemoryGibUsed); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateOnline(formats strfmt.Registry) error {

	if err := validate.Required("online", "body", m.Online); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("updateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("updateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateVcpuFree(formats strfmt.Registry) error {

	if err := validate.Required("vcpuFree", "body", m.VcpuFree); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateVcpuPerCPUThread(formats strfmt.Registry) error {

	if err := validate.Required("vcpuPerCpuThread", "body", m.VcpuPerCPUThread); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateVcpuUsed(formats strfmt.Registry) error {

	if err := validate.Required("vcpuUsed", "body", m.VcpuUsed); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateVMCount(formats strfmt.Registry) error {

	if err := validate.Required("vmCount", "body", m.VMCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this host based on context it is used
func (m *Host) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Host) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Host) UnmarshalBinary(b []byte) error {
	var res Host
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
