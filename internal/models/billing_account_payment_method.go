// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BillingAccountPaymentMethod billing account payment method
//
// swagger:model BillingAccountPaymentMethod
type BillingAccountPaymentMethod struct {

	// card
	Card *PaymentMethodCard `json:"card,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is default
	IsDefault bool `json:"isDefault,omitempty"`

	// paypal
	Paypal *PaymentMethodPaypal `json:"paypal,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this billing account payment method
func (m *BillingAccountPaymentMethod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaypal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingAccountPaymentMethod) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *BillingAccountPaymentMethod) validatePaypal(formats strfmt.Registry) error {
	if swag.IsZero(m.Paypal) { // not required
		return nil
	}

	if m.Paypal != nil {
		if err := m.Paypal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paypal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paypal")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this billing account payment method based on the context it is used
func (m *BillingAccountPaymentMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaypal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingAccountPaymentMethod) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if m.Card != nil {

		if swag.IsZero(m.Card) { // not required
			return nil
		}

		if err := m.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *BillingAccountPaymentMethod) contextValidatePaypal(ctx context.Context, formats strfmt.Registry) error {

	if m.Paypal != nil {

		if swag.IsZero(m.Paypal) { // not required
			return nil
		}

		if err := m.Paypal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paypal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paypal")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingAccountPaymentMethod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingAccountPaymentMethod) UnmarshalBinary(b []byte) error {
	var res BillingAccountPaymentMethod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
