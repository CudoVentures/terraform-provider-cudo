// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageClass storage class
//
// swagger:model StorageClass
type StorageClass string

func NewStorageClass(value StorageClass) *StorageClass {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StorageClass.
func (m StorageClass) Pointer() *StorageClass {
	return &m
}

const (

	// StorageClassSTORAGECLASSUNKNOWN captures enum value "STORAGE_CLASS_UNKNOWN"
	StorageClassSTORAGECLASSUNKNOWN StorageClass = "STORAGE_CLASS_UNKNOWN"

	// StorageClassSTORAGECLASSLOCAL captures enum value "STORAGE_CLASS_LOCAL"
	StorageClassSTORAGECLASSLOCAL StorageClass = "STORAGE_CLASS_LOCAL"

	// StorageClassSTORAGECLASSNETWORK captures enum value "STORAGE_CLASS_NETWORK"
	StorageClassSTORAGECLASSNETWORK StorageClass = "STORAGE_CLASS_NETWORK"
)

// for schema
var storageClassEnum []interface{}

func init() {
	var res []StorageClass
	if err := json.Unmarshal([]byte(`["STORAGE_CLASS_UNKNOWN","STORAGE_CLASS_LOCAL","STORAGE_CLASS_NETWORK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageClassEnum = append(storageClassEnum, v)
	}
}

func (m StorageClass) validateStorageClassEnum(path, location string, value StorageClass) error {
	if err := validate.EnumCase(path, location, value, storageClassEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage class
func (m StorageClass) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageClassEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this storage class based on context it is used
func (m StorageClass) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
