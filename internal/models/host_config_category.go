// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HostConfigCategory host config category
//
// swagger:model HostConfigCategory
type HostConfigCategory struct {

	// count Vm available
	CountVMAvailable int32 `json:"countVmAvailable,omitempty"`

	// cpu model
	CPUModel string `json:"cpuModel,omitempty"`

	// data center Id
	DataCenterID string `json:"dataCenterId,omitempty"`

	// gpu model
	GpuModel string `json:"gpuModel,omitempty"`

	// gpu price hr
	GpuPriceHr *Decimal `json:"gpuPriceHr,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// machine type
	MachineType string `json:"machineType,omitempty"`

	// memory gib price hr
	MemoryGibPriceHr *Decimal `json:"memoryGibPriceHr,omitempty"`

	// storage gib price hr
	StorageGibPriceHr *Decimal `json:"storageGibPriceHr,omitempty"`

	// total gpu price hr
	TotalGpuPriceHr *Decimal `json:"totalGpuPriceHr,omitempty"`

	// total memory price hr
	TotalMemoryPriceHr *Decimal `json:"totalMemoryPriceHr,omitempty"`

	// total price hr
	TotalPriceHr *Decimal `json:"totalPriceHr,omitempty"`

	// total storage price hr
	TotalStoragePriceHr *Decimal `json:"totalStoragePriceHr,omitempty"`

	// total vcpu price hr
	TotalVcpuPriceHr *Decimal `json:"totalVcpuPriceHr,omitempty"`

	// vcpu price hr
	VcpuPriceHr *Decimal `json:"vcpuPriceHr,omitempty"`
}

// Validate validates this host config category
func (m *HostConfigCategory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryGibPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageGibPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalGpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMemoryPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalStoragePriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalVcpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostConfigCategory) validateGpuPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.GpuPriceHr) { // not required
		return nil
	}

	if m.GpuPriceHr != nil {
		if err := m.GpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateMemoryGibPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.MemoryGibPriceHr) { // not required
		return nil
	}

	if m.MemoryGibPriceHr != nil {
		if err := m.MemoryGibPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateStorageGibPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageGibPriceHr) { // not required
		return nil
	}

	if m.StorageGibPriceHr != nil {
		if err := m.StorageGibPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalGpuPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalGpuPriceHr) { // not required
		return nil
	}

	if m.TotalGpuPriceHr != nil {
		if err := m.TotalGpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalGpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalGpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalMemoryPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalMemoryPriceHr) { // not required
		return nil
	}

	if m.TotalMemoryPriceHr != nil {
		if err := m.TotalMemoryPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalMemoryPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalMemoryPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalPriceHr) { // not required
		return nil
	}

	if m.TotalPriceHr != nil {
		if err := m.TotalPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalStoragePriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalStoragePriceHr) { // not required
		return nil
	}

	if m.TotalStoragePriceHr != nil {
		if err := m.TotalStoragePriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalStoragePriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalStoragePriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalVcpuPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalVcpuPriceHr) { // not required
		return nil
	}

	if m.TotalVcpuPriceHr != nil {
		if err := m.TotalVcpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalVcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalVcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateVcpuPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.VcpuPriceHr) { // not required
		return nil
	}

	if m.VcpuPriceHr != nil {
		if err := m.VcpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this host config category based on the context it is used
func (m *HostConfigCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemoryGibPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageGibPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalGpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalMemoryPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalStoragePriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalVcpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostConfigCategory) contextValidateGpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.GpuPriceHr != nil {
		if err := m.GpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateMemoryGibPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MemoryGibPriceHr != nil {
		if err := m.MemoryGibPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateStorageGibPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageGibPriceHr != nil {
		if err := m.StorageGibPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalGpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalGpuPriceHr != nil {
		if err := m.TotalGpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalGpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalGpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalMemoryPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalMemoryPriceHr != nil {
		if err := m.TotalMemoryPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalMemoryPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalMemoryPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalPriceHr != nil {
		if err := m.TotalPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalStoragePriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalStoragePriceHr != nil {
		if err := m.TotalStoragePriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalStoragePriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalStoragePriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalVcpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalVcpuPriceHr != nil {
		if err := m.TotalVcpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalVcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalVcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateVcpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.VcpuPriceHr != nil {
		if err := m.VcpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostConfigCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostConfigCategory) UnmarshalBinary(b []byte) error {
	var res HostConfigCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
