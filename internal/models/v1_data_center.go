// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1DataCenter v1 data center
//
// swagger:model v1.DataCenter
type V1DataCenter struct {

	// create by
	// Read Only: true
	CreateBy string `json:"createBy,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// lng lat
	LngLat *Point `json:"lngLat,omitempty"`

	// one frontend Id
	// Required: true
	OneFrontendID *string `json:"oneFrontendId"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// renewable energy
	RenewableEnergy bool `json:"renewableEnergy,omitempty"`

	// s3 endpoint
	// Required: true
	S3Endpoint *string `json:"s3Endpoint"`

	// supplier name
	SupplierName string `json:"supplierName,omitempty"`
}

// Validate validates this v1 data center
func (m *V1DataCenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLngLat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneFrontendID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3Endpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DataCenter) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V1DataCenter) validateLngLat(formats strfmt.Registry) error {
	if swag.IsZero(m.LngLat) { // not required
		return nil
	}

	if m.LngLat != nil {
		if err := m.LngLat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lngLat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lngLat")
			}
			return err
		}
	}

	return nil
}

func (m *V1DataCenter) validateOneFrontendID(formats strfmt.Registry) error {

	if err := validate.Required("oneFrontendId", "body", m.OneFrontendID); err != nil {
		return err
	}

	return nil
}

func (m *V1DataCenter) validateS3Endpoint(formats strfmt.Registry) error {

	if err := validate.Required("s3Endpoint", "body", m.S3Endpoint); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1 data center based on the context it is used
func (m *V1DataCenter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreateBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLngLat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DataCenter) contextValidateCreateBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createBy", "body", string(m.CreateBy)); err != nil {
		return err
	}

	return nil
}

func (m *V1DataCenter) contextValidateLngLat(ctx context.Context, formats strfmt.Registry) error {

	if m.LngLat != nil {

		if swag.IsZero(m.LngLat) { // not required
			return nil
		}

		if err := m.LngLat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lngLat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lngLat")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1DataCenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DataCenter) UnmarshalBinary(b []byte) error {
	var res V1DataCenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
