// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateVMBody create VM body
//
// swagger:model CreateVMBody
type CreateVMBody struct {

	// boot disk
	BootDisk *Disk `json:"bootDisk,omitempty"`

	// boot disk image Id
	// Required: true
	BootDiskImageID *string `json:"bootDiskImageId"`

	// cpu model
	CPUModel string `json:"cpuModel,omitempty"`

	// custom Ssh keys
	CustomSSHKeys []string `json:"customSshKeys"`

	// data center Id
	DataCenterID string `json:"dataCenterId,omitempty"`

	// gpu model
	GpuModel string `json:"gpuModel,omitempty"`

	// gpu model Id
	GpuModelID string `json:"gpuModelId,omitempty"`

	// gpus
	Gpus int32 `json:"gpus,omitempty"`

	// machine type
	MachineType string `json:"machineType,omitempty"`

	// max price hr
	MaxPriceHr *Decimal `json:"maxPriceHr,omitempty"`

	// memory gib
	MemoryGib int32 `json:"memoryGib,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// nics
	Nics []*CreateVMRequestNIC `json:"nics"`

	// password
	Password string `json:"password,omitempty"`

	// ignored if any nics are provided
	SecurityGroupIds []string `json:"securityGroupIds"`

	// ssh key source
	SSHKeySource *SSHKeySource `json:"sshKeySource,omitempty"`

	// start script
	StartScript string `json:"startScript,omitempty"`

	// storage disk ids
	StorageDiskIds []string `json:"storageDiskIds"`

	// topology
	Topology *CPUTopology `json:"topology,omitempty"`

	// vcpus
	Vcpus int32 `json:"vcpus,omitempty"`

	// vm Id
	// Required: true
	VMID *string `json:"vmId"`
}

// Validate validates this create VM body
func (m *CreateVMBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootDiskImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHKeySource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVMBody) validateBootDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.BootDisk) { // not required
		return nil
	}

	if m.BootDisk != nil {
		if err := m.BootDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bootDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bootDisk")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVMBody) validateBootDiskImageID(formats strfmt.Registry) error {

	if err := validate.Required("bootDiskImageId", "body", m.BootDiskImageID); err != nil {
		return err
	}

	return nil
}

func (m *CreateVMBody) validateMaxPriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxPriceHr) { // not required
		return nil
	}

	if m.MaxPriceHr != nil {
		if err := m.MaxPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVMBody) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateVMBody) validateSSHKeySource(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHKeySource) { // not required
		return nil
	}

	if m.SSHKeySource != nil {
		if err := m.SSHKeySource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshKeySource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshKeySource")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVMBody) validateTopology(formats strfmt.Registry) error {
	if swag.IsZero(m.Topology) { // not required
		return nil
	}

	if m.Topology != nil {
		if err := m.Topology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVMBody) validateVMID(formats strfmt.Registry) error {

	if err := validate.Required("vmId", "body", m.VMID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create VM body based on the context it is used
func (m *CreateVMBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBootDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHKeySource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTopology(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVMBody) contextValidateBootDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.BootDisk != nil {

		if swag.IsZero(m.BootDisk) { // not required
			return nil
		}

		if err := m.BootDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bootDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bootDisk")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVMBody) contextValidateMaxPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxPriceHr != nil {

		if swag.IsZero(m.MaxPriceHr) { // not required
			return nil
		}

		if err := m.MaxPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maxPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maxPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVMBody) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nics); i++ {

		if m.Nics[i] != nil {

			if swag.IsZero(m.Nics[i]) { // not required
				return nil
			}

			if err := m.Nics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateVMBody) contextValidateSSHKeySource(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHKeySource != nil {

		if swag.IsZero(m.SSHKeySource) { // not required
			return nil
		}

		if err := m.SSHKeySource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshKeySource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshKeySource")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVMBody) contextValidateTopology(ctx context.Context, formats strfmt.Registry) error {

	if m.Topology != nil {

		if swag.IsZero(m.Topology) { // not required
			return nil
		}

		if err := m.Topology.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateVMBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateVMBody) UnmarshalBinary(b []byte) error {
	var res CreateVMBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
