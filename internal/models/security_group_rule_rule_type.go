// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityGroupRuleRuleType security group rule rule type
//
// swagger:model SecurityGroupRule.RuleType
type SecurityGroupRuleRuleType string

func NewSecurityGroupRuleRuleType(value SecurityGroupRuleRuleType) *SecurityGroupRuleRuleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecurityGroupRuleRuleType.
func (m SecurityGroupRuleRuleType) Pointer() *SecurityGroupRuleRuleType {
	return &m
}

const (

	// SecurityGroupRuleRuleTypeRULETYPEUNKNOWN captures enum value "RULE_TYPE_UNKNOWN"
	SecurityGroupRuleRuleTypeRULETYPEUNKNOWN SecurityGroupRuleRuleType = "RULE_TYPE_UNKNOWN"

	// SecurityGroupRuleRuleTypeRULETYPEINBOUND captures enum value "RULE_TYPE_INBOUND"
	SecurityGroupRuleRuleTypeRULETYPEINBOUND SecurityGroupRuleRuleType = "RULE_TYPE_INBOUND"

	// SecurityGroupRuleRuleTypeRULETYPEOUTBOUND captures enum value "RULE_TYPE_OUTBOUND"
	SecurityGroupRuleRuleTypeRULETYPEOUTBOUND SecurityGroupRuleRuleType = "RULE_TYPE_OUTBOUND"
)

// for schema
var securityGroupRuleRuleTypeEnum []interface{}

func init() {
	var res []SecurityGroupRuleRuleType
	if err := json.Unmarshal([]byte(`["RULE_TYPE_UNKNOWN","RULE_TYPE_INBOUND","RULE_TYPE_OUTBOUND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityGroupRuleRuleTypeEnum = append(securityGroupRuleRuleTypeEnum, v)
	}
}

func (m SecurityGroupRuleRuleType) validateSecurityGroupRuleRuleTypeEnum(path, location string, value SecurityGroupRuleRuleType) error {
	if err := validate.EnumCase(path, location, value, securityGroupRuleRuleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security group rule rule type
func (m SecurityGroupRuleRuleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityGroupRuleRuleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security group rule rule type based on context it is used
func (m SecurityGroupRuleRuleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
