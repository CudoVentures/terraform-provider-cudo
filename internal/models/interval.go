// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Interval interval
//
// swagger:model Interval
type Interval string

func NewInterval(value Interval) *Interval {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Interval.
func (m Interval) Pointer() *Interval {
	return &m
}

const (

	// IntervalINTERVALUNKNOWN captures enum value "INTERVAL_UNKNOWN"
	IntervalINTERVALUNKNOWN Interval = "INTERVAL_UNKNOWN"

	// IntervalINTERVALDAY captures enum value "INTERVAL_DAY"
	IntervalINTERVALDAY Interval = "INTERVAL_DAY"

	// IntervalINTERVALWEEK captures enum value "INTERVAL_WEEK"
	IntervalINTERVALWEEK Interval = "INTERVAL_WEEK"

	// IntervalINTERVALMONTH captures enum value "INTERVAL_MONTH"
	IntervalINTERVALMONTH Interval = "INTERVAL_MONTH"
)

// for schema
var intervalEnum []interface{}

func init() {
	var res []Interval
	if err := json.Unmarshal([]byte(`["INTERVAL_UNKNOWN","INTERVAL_DAY","INTERVAL_WEEK","INTERVAL_MONTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intervalEnum = append(intervalEnum, v)
	}
}

func (m Interval) validateIntervalEnum(path, location string, value Interval) error {
	if err := validate.EnumCase(path, location, value, intervalEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this interval
func (m Interval) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIntervalEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this interval based on context it is used
func (m Interval) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
