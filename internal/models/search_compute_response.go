// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchComputeResponse search compute response
//
// swagger:model SearchComputeResponse
type SearchComputeResponse struct {

	// count Vm available
	// Required: true
	CountVMAvailable *int32 `json:"countVmAvailable"`

	// cpu models
	// Required: true
	CPUModels []*CPUModelCategory `json:"cpuModels"`

	// data centers
	// Required: true
	DataCenters []*DataCenterCategory `json:"dataCenters"`

	// gpu models
	// Required: true
	GpuModels []*GpuModelCategory `json:"gpuModels"`

	// host configs
	// Required: true
	HostConfigs []*HostConfigCategory `json:"hostConfigs"`

	// max gpu
	// Required: true
	MaxGpu *int32 `json:"maxGpu"`

	// max memory gib
	// Required: true
	MaxMemoryGib *int32 `json:"maxMemoryGib"`

	// max vcpu
	// Required: true
	MaxVcpu *int32 `json:"maxVcpu"`

	// request
	// Required: true
	Request *SearchComputeRequest `json:"request"`
}

// Validate validates this search compute response
func (m *SearchComputeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountVMAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataCenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMemoryGib(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVcpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchComputeResponse) validateCountVMAvailable(formats strfmt.Registry) error {

	if err := validate.Required("countVmAvailable", "body", m.CountVMAvailable); err != nil {
		return err
	}

	return nil
}

func (m *SearchComputeResponse) validateCPUModels(formats strfmt.Registry) error {

	if err := validate.Required("cpuModels", "body", m.CPUModels); err != nil {
		return err
	}

	for i := 0; i < len(m.CPUModels); i++ {
		if swag.IsZero(m.CPUModels[i]) { // not required
			continue
		}

		if m.CPUModels[i] != nil {
			if err := m.CPUModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpuModels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cpuModels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchComputeResponse) validateDataCenters(formats strfmt.Registry) error {

	if err := validate.Required("dataCenters", "body", m.DataCenters); err != nil {
		return err
	}

	for i := 0; i < len(m.DataCenters); i++ {
		if swag.IsZero(m.DataCenters[i]) { // not required
			continue
		}

		if m.DataCenters[i] != nil {
			if err := m.DataCenters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataCenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataCenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchComputeResponse) validateGpuModels(formats strfmt.Registry) error {

	if err := validate.Required("gpuModels", "body", m.GpuModels); err != nil {
		return err
	}

	for i := 0; i < len(m.GpuModels); i++ {
		if swag.IsZero(m.GpuModels[i]) { // not required
			continue
		}

		if m.GpuModels[i] != nil {
			if err := m.GpuModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpuModels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpuModels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchComputeResponse) validateHostConfigs(formats strfmt.Registry) error {

	if err := validate.Required("hostConfigs", "body", m.HostConfigs); err != nil {
		return err
	}

	for i := 0; i < len(m.HostConfigs); i++ {
		if swag.IsZero(m.HostConfigs[i]) { // not required
			continue
		}

		if m.HostConfigs[i] != nil {
			if err := m.HostConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchComputeResponse) validateMaxGpu(formats strfmt.Registry) error {

	if err := validate.Required("maxGpu", "body", m.MaxGpu); err != nil {
		return err
	}

	return nil
}

func (m *SearchComputeResponse) validateMaxMemoryGib(formats strfmt.Registry) error {

	if err := validate.Required("maxMemoryGib", "body", m.MaxMemoryGib); err != nil {
		return err
	}

	return nil
}

func (m *SearchComputeResponse) validateMaxVcpu(formats strfmt.Registry) error {

	if err := validate.Required("maxVcpu", "body", m.MaxVcpu); err != nil {
		return err
	}

	return nil
}

func (m *SearchComputeResponse) validateRequest(formats strfmt.Registry) error {

	if err := validate.Required("request", "body", m.Request); err != nil {
		return err
	}

	if m.Request != nil {
		if err := m.Request.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("request")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search compute response based on the context it is used
func (m *SearchComputeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPUModels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataCenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpuModels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchComputeResponse) contextValidateCPUModels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CPUModels); i++ {

		if m.CPUModels[i] != nil {
			if err := m.CPUModels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpuModels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cpuModels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchComputeResponse) contextValidateDataCenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataCenters); i++ {

		if m.DataCenters[i] != nil {
			if err := m.DataCenters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataCenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataCenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchComputeResponse) contextValidateGpuModels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GpuModels); i++ {

		if m.GpuModels[i] != nil {
			if err := m.GpuModels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpuModels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpuModels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchComputeResponse) contextValidateHostConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostConfigs); i++ {

		if m.HostConfigs[i] != nil {
			if err := m.HostConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchComputeResponse) contextValidateRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.Request != nil {
		if err := m.Request.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchComputeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchComputeResponse) UnmarshalBinary(b []byte) error {
	var res SearchComputeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
