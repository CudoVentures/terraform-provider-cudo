// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingAccount billing account
//
// swagger:model BillingAccount
type BillingAccount struct {

	// billing threshold
	// Read Only: true
	BillingThreshold *Decimal `json:"billingThreshold,omitempty"`

	// blocked
	// Read Only: true
	Blocked *bool `json:"blocked,omitempty"`

	// create by
	// Read Only: true
	CreateBy string `json:"createBy,omitempty"`

	// create time
	// Read Only: true
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// demand enabled
	// Read Only: true
	DemandEnabled *bool `json:"demandEnabled,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// invoice time
	// Read Only: true
	// Format: date-time
	InvoiceTime strfmt.DateTime `json:"invoiceTime,omitempty"`

	// monthly spend
	MonthlySpend string `json:"monthlySpend,omitempty"`

	// stripe ref
	StripeRef string `json:"stripeRef,omitempty"`

	// supply enabled
	// Read Only: true
	SupplyEnabled *bool `json:"supplyEnabled,omitempty"`

	// tax ids
	TaxIds []*TaxID `json:"taxIds"`
}

// Validate validates this billing account
func (m *BillingAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingAccount) validateBillingThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingThreshold) { // not required
		return nil
	}

	if m.BillingThreshold != nil {
		if err := m.BillingThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingThreshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billingThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *BillingAccount) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) validateInvoiceTime(formats strfmt.Registry) error {
	if swag.IsZero(m.InvoiceTime) { // not required
		return nil
	}

	if err := validate.FormatOf("invoiceTime", "body", "date-time", m.InvoiceTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) validateTaxIds(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxIds) { // not required
		return nil
	}

	for i := 0; i < len(m.TaxIds); i++ {
		if swag.IsZero(m.TaxIds[i]) { // not required
			continue
		}

		if m.TaxIds[i] != nil {
			if err := m.TaxIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this billing account based on the context it is used
func (m *BillingAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBillingThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlocked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDemandEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvoiceTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupplyEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingAccount) contextValidateBillingThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingThreshold != nil {

		if swag.IsZero(m.BillingThreshold) { // not required
			return nil
		}

		if err := m.BillingThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billingThreshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billingThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *BillingAccount) contextValidateBlocked(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "blocked", "body", m.Blocked); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) contextValidateCreateBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createBy", "body", string(m.CreateBy)); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) contextValidateCreateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createTime", "body", strfmt.DateTime(m.CreateTime)); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) contextValidateDemandEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "demandEnabled", "body", m.DemandEnabled); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) contextValidateInvoiceTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "invoiceTime", "body", strfmt.DateTime(m.InvoiceTime)); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) contextValidateSupplyEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "supplyEnabled", "body", m.SupplyEnabled); err != nil {
		return err
	}

	return nil
}

func (m *BillingAccount) contextValidateTaxIds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaxIds); i++ {

		if m.TaxIds[i] != nil {

			if swag.IsZero(m.TaxIds[i]) { // not required
				return nil
			}

			if err := m.TaxIds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxIds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxIds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingAccount) UnmarshalBinary(b []byte) error {
	var res BillingAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
