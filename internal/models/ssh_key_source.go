// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SSHKeySource Ssh key source
//
// swagger:model SshKeySource
type SSHKeySource string

func NewSSHKeySource(value SSHKeySource) *SSHKeySource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SSHKeySource.
func (m SSHKeySource) Pointer() *SSHKeySource {
	return &m
}

const (

	// SSHKeySourceSSHKEYSOURCEUNKNOWN captures enum value "SSH_KEY_SOURCE_UNKNOWN"
	SSHKeySourceSSHKEYSOURCEUNKNOWN SSHKeySource = "SSH_KEY_SOURCE_UNKNOWN"

	// SSHKeySourceSSHKEYSOURCEPROJECT captures enum value "SSH_KEY_SOURCE_PROJECT"
	SSHKeySourceSSHKEYSOURCEPROJECT SSHKeySource = "SSH_KEY_SOURCE_PROJECT"

	// SSHKeySourceSSHKEYSOURCEUSER captures enum value "SSH_KEY_SOURCE_USER"
	SSHKeySourceSSHKEYSOURCEUSER SSHKeySource = "SSH_KEY_SOURCE_USER"

	// SSHKeySourceSSHKEYSOURCENONE captures enum value "SSH_KEY_SOURCE_NONE"
	SSHKeySourceSSHKEYSOURCENONE SSHKeySource = "SSH_KEY_SOURCE_NONE"
)

// for schema
var sshKeySourceEnum []interface{}

func init() {
	var res []SSHKeySource
	if err := json.Unmarshal([]byte(`["SSH_KEY_SOURCE_UNKNOWN","SSH_KEY_SOURCE_PROJECT","SSH_KEY_SOURCE_USER","SSH_KEY_SOURCE_NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sshKeySourceEnum = append(sshKeySourceEnum, v)
	}
}

func (m SSHKeySource) validateSSHKeySourceEnum(path, location string, value SSHKeySource) error {
	if err := validate.EnumCase(path, location, value, sshKeySourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Ssh key source
func (m SSHKeySource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSSHKeySourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Ssh key source based on context it is used
func (m SSHKeySource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
