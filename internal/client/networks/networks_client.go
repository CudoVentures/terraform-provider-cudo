// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetwork(params *CreateNetworkParams, opts ...ClientOption) (*CreateNetworkOK, error)

	CreateSecurityGroup(params *CreateSecurityGroupParams, opts ...ClientOption) (*CreateSecurityGroupOK, error)

	DeleteNetwork(params *DeleteNetworkParams, opts ...ClientOption) (*DeleteNetworkOK, error)

	DeleteSecurityGroup(params *DeleteSecurityGroupParams, opts ...ClientOption) (*DeleteSecurityGroupOK, error)

	GetNetwork(params *GetNetworkParams, opts ...ClientOption) (*GetNetworkOK, error)

	GetSecurityGroup(params *GetSecurityGroupParams, opts ...ClientOption) (*GetSecurityGroupOK, error)

	ListNetworks(params *ListNetworksParams, opts ...ClientOption) (*ListNetworksOK, error)

	ListSecurityGroups(params *ListSecurityGroupsParams, opts ...ClientOption) (*ListSecurityGroupsOK, error)

	SearchNetworks(params *SearchNetworksParams, opts ...ClientOption) (*SearchNetworksOK, error)

	UpdateSecurityGroup(params *UpdateSecurityGroupParams, opts ...ClientOption) (*UpdateSecurityGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateNetwork creates network
*/
func (a *Client) CreateNetwork(params *CreateNetworkParams, opts ...ClientOption) (*CreateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNetwork",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateSecurityGroup creates security group
*/
func (a *Client) CreateSecurityGroup(params *CreateSecurityGroupParams, opts ...ClientOption) (*CreateSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSecurityGroup",
		Method:             "POST",
		PathPattern:        "/v1/projects/{securityGroup.projectId}/networks/security-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSecurityGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSecurityGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNetwork deletes network
*/
func (a *Client) DeleteNetwork(params *DeleteNetworkParams, opts ...ClientOption) (*DeleteNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNetwork",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/networks/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSecurityGroup deletes security group
*/
func (a *Client) DeleteSecurityGroup(params *DeleteSecurityGroupParams, opts ...ClientOption) (*DeleteSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSecurityGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/networks/security-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSecurityGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSecurityGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetwork gets network
*/
func (a *Client) GetNetwork(params *GetNetworkParams, opts ...ClientOption) (*GetNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetwork",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/networks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSecurityGroup gets a security group
*/
func (a *Client) GetSecurityGroup(params *GetSecurityGroupParams, opts ...ClientOption) (*GetSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSecurityGroup",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/networks/security-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSecurityGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListNetworks lists networks
*/
func (a *Client) ListNetworks(params *ListNetworksParams, opts ...ClientOption) (*ListNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListNetworks",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSecurityGroups lists security groups
*/
func (a *Client) ListSecurityGroups(params *ListSecurityGroupsParams, opts ...ClientOption) (*ListSecurityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecurityGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSecurityGroups",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/networks/security-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSecurityGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecurityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSecurityGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SearchNetworks searches networks available to cluster
*/
func (a *Client) SearchNetworks(params *SearchNetworksParams, opts ...ClientOption) (*SearchNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchNetworks",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/networks/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSecurityGroup updates security group
*/
func (a *Client) UpdateSecurityGroup(params *UpdateSecurityGroupParams, opts ...ClientOption) (*UpdateSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSecurityGroup",
		Method:             "PATCH",
		PathPattern:        "/v1/projects/{securityGroup.projectId}/networks/security-groups/{securityGroup.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSecurityGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSecurityGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
