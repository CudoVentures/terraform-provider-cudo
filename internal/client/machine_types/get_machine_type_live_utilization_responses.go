// Code generated by go-swagger; DO NOT EDIT.

package machine_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/CudoVentures/terraform-provider-cudo/internal/models"
)

// GetMachineTypeLiveUtilizationReader is a Reader for the GetMachineTypeLiveUtilization structure.
type GetMachineTypeLiveUtilizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMachineTypeLiveUtilizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMachineTypeLiveUtilizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetMachineTypeLiveUtilizationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMachineTypeLiveUtilizationOK creates a GetMachineTypeLiveUtilizationOK with default headers values
func NewGetMachineTypeLiveUtilizationOK() *GetMachineTypeLiveUtilizationOK {
	return &GetMachineTypeLiveUtilizationOK{}
}

/*
GetMachineTypeLiveUtilizationOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetMachineTypeLiveUtilizationOK struct {
	Payload *models.GetMachineTypeLiveUtilizationResponse
}

// IsSuccess returns true when this get machine type live utilization o k response has a 2xx status code
func (o *GetMachineTypeLiveUtilizationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get machine type live utilization o k response has a 3xx status code
func (o *GetMachineTypeLiveUtilizationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get machine type live utilization o k response has a 4xx status code
func (o *GetMachineTypeLiveUtilizationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get machine type live utilization o k response has a 5xx status code
func (o *GetMachineTypeLiveUtilizationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get machine type live utilization o k response a status code equal to that given
func (o *GetMachineTypeLiveUtilizationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get machine type live utilization o k response
func (o *GetMachineTypeLiveUtilizationOK) Code() int {
	return 200
}

func (o *GetMachineTypeLiveUtilizationOK) Error() string {
	return fmt.Sprintf("[GET /v1/data-centers/{dataCenterId}/machine-types/{machineType}/live-utilization][%d] getMachineTypeLiveUtilizationOK  %+v", 200, o.Payload)
}

func (o *GetMachineTypeLiveUtilizationOK) String() string {
	return fmt.Sprintf("[GET /v1/data-centers/{dataCenterId}/machine-types/{machineType}/live-utilization][%d] getMachineTypeLiveUtilizationOK  %+v", 200, o.Payload)
}

func (o *GetMachineTypeLiveUtilizationOK) GetPayload() *models.GetMachineTypeLiveUtilizationResponse {
	return o.Payload
}

func (o *GetMachineTypeLiveUtilizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetMachineTypeLiveUtilizationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMachineTypeLiveUtilizationDefault creates a GetMachineTypeLiveUtilizationDefault with default headers values
func NewGetMachineTypeLiveUtilizationDefault(code int) *GetMachineTypeLiveUtilizationDefault {
	return &GetMachineTypeLiveUtilizationDefault{
		_statusCode: code,
	}
}

/*
GetMachineTypeLiveUtilizationDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetMachineTypeLiveUtilizationDefault struct {
	_statusCode int

	Payload *models.Status
}

// IsSuccess returns true when this get machine type live utilization default response has a 2xx status code
func (o *GetMachineTypeLiveUtilizationDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get machine type live utilization default response has a 3xx status code
func (o *GetMachineTypeLiveUtilizationDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get machine type live utilization default response has a 4xx status code
func (o *GetMachineTypeLiveUtilizationDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get machine type live utilization default response has a 5xx status code
func (o *GetMachineTypeLiveUtilizationDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get machine type live utilization default response a status code equal to that given
func (o *GetMachineTypeLiveUtilizationDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get machine type live utilization default response
func (o *GetMachineTypeLiveUtilizationDefault) Code() int {
	return o._statusCode
}

func (o *GetMachineTypeLiveUtilizationDefault) Error() string {
	return fmt.Sprintf("[GET /v1/data-centers/{dataCenterId}/machine-types/{machineType}/live-utilization][%d] GetMachineTypeLiveUtilization default  %+v", o._statusCode, o.Payload)
}

func (o *GetMachineTypeLiveUtilizationDefault) String() string {
	return fmt.Sprintf("[GET /v1/data-centers/{dataCenterId}/machine-types/{machineType}/live-utilization][%d] GetMachineTypeLiveUtilization default  %+v", o._statusCode, o.Payload)
}

func (o *GetMachineTypeLiveUtilizationDefault) GetPayload() *models.Status {
	return o.Payload
}

func (o *GetMachineTypeLiveUtilizationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
