// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchComputeParams creates a new SearchComputeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchComputeParams() *SearchComputeParams {
	return &SearchComputeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchComputeParamsWithTimeout creates a new SearchComputeParams object
// with the ability to set a timeout on a request.
func NewSearchComputeParamsWithTimeout(timeout time.Duration) *SearchComputeParams {
	return &SearchComputeParams{
		timeout: timeout,
	}
}

// NewSearchComputeParamsWithContext creates a new SearchComputeParams object
// with the ability to set a context for a request.
func NewSearchComputeParamsWithContext(ctx context.Context) *SearchComputeParams {
	return &SearchComputeParams{
		Context: ctx,
	}
}

// NewSearchComputeParamsWithHTTPClient creates a new SearchComputeParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchComputeParamsWithHTTPClient(client *http.Client) *SearchComputeParams {
	return &SearchComputeParams{
		HTTPClient: client,
	}
}

/*
SearchComputeParams contains all the parameters to send to the API endpoint

	for the search compute operation.

	Typically these are written to a http.Request.
*/
type SearchComputeParams struct {

	// CPUModel.
	CPUModel *string

	// DataCenterID.
	DataCenterID *string

	// Gpu.
	//
	// Format: int32
	Gpu *int32

	// GpuModel.
	GpuModel *string

	// MemoryGib.
	//
	// Format: int32
	MemoryGib *int32

	// OrderBy.
	OrderBy *string

	// PageNumber.
	//
	// Format: int32
	PageNumber *int32

	// PageSize.
	//
	// Format: int32
	PageSize *int32

	// RegionID.
	RegionID *string

	// StorageGib.
	//
	// Format: int32
	StorageGib *int32

	// Vcpu.
	//
	// Format: int32
	Vcpu *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search compute params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchComputeParams) WithDefaults() *SearchComputeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search compute params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchComputeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search compute params
func (o *SearchComputeParams) WithTimeout(timeout time.Duration) *SearchComputeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search compute params
func (o *SearchComputeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search compute params
func (o *SearchComputeParams) WithContext(ctx context.Context) *SearchComputeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search compute params
func (o *SearchComputeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search compute params
func (o *SearchComputeParams) WithHTTPClient(client *http.Client) *SearchComputeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search compute params
func (o *SearchComputeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCPUModel adds the cPUModel to the search compute params
func (o *SearchComputeParams) WithCPUModel(cPUModel *string) *SearchComputeParams {
	o.SetCPUModel(cPUModel)
	return o
}

// SetCPUModel adds the cpuModel to the search compute params
func (o *SearchComputeParams) SetCPUModel(cPUModel *string) {
	o.CPUModel = cPUModel
}

// WithDataCenterID adds the dataCenterID to the search compute params
func (o *SearchComputeParams) WithDataCenterID(dataCenterID *string) *SearchComputeParams {
	o.SetDataCenterID(dataCenterID)
	return o
}

// SetDataCenterID adds the dataCenterId to the search compute params
func (o *SearchComputeParams) SetDataCenterID(dataCenterID *string) {
	o.DataCenterID = dataCenterID
}

// WithGpu adds the gpu to the search compute params
func (o *SearchComputeParams) WithGpu(gpu *int32) *SearchComputeParams {
	o.SetGpu(gpu)
	return o
}

// SetGpu adds the gpu to the search compute params
func (o *SearchComputeParams) SetGpu(gpu *int32) {
	o.Gpu = gpu
}

// WithGpuModel adds the gpuModel to the search compute params
func (o *SearchComputeParams) WithGpuModel(gpuModel *string) *SearchComputeParams {
	o.SetGpuModel(gpuModel)
	return o
}

// SetGpuModel adds the gpuModel to the search compute params
func (o *SearchComputeParams) SetGpuModel(gpuModel *string) {
	o.GpuModel = gpuModel
}

// WithMemoryGib adds the memoryGib to the search compute params
func (o *SearchComputeParams) WithMemoryGib(memoryGib *int32) *SearchComputeParams {
	o.SetMemoryGib(memoryGib)
	return o
}

// SetMemoryGib adds the memoryGib to the search compute params
func (o *SearchComputeParams) SetMemoryGib(memoryGib *int32) {
	o.MemoryGib = memoryGib
}

// WithOrderBy adds the orderBy to the search compute params
func (o *SearchComputeParams) WithOrderBy(orderBy *string) *SearchComputeParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the search compute params
func (o *SearchComputeParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPageNumber adds the pageNumber to the search compute params
func (o *SearchComputeParams) WithPageNumber(pageNumber *int32) *SearchComputeParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the search compute params
func (o *SearchComputeParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the search compute params
func (o *SearchComputeParams) WithPageSize(pageSize *int32) *SearchComputeParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search compute params
func (o *SearchComputeParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithRegionID adds the regionID to the search compute params
func (o *SearchComputeParams) WithRegionID(regionID *string) *SearchComputeParams {
	o.SetRegionID(regionID)
	return o
}

// SetRegionID adds the regionId to the search compute params
func (o *SearchComputeParams) SetRegionID(regionID *string) {
	o.RegionID = regionID
}

// WithStorageGib adds the storageGib to the search compute params
func (o *SearchComputeParams) WithStorageGib(storageGib *int32) *SearchComputeParams {
	o.SetStorageGib(storageGib)
	return o
}

// SetStorageGib adds the storageGib to the search compute params
func (o *SearchComputeParams) SetStorageGib(storageGib *int32) {
	o.StorageGib = storageGib
}

// WithVcpu adds the vcpu to the search compute params
func (o *SearchComputeParams) WithVcpu(vcpu *int32) *SearchComputeParams {
	o.SetVcpu(vcpu)
	return o
}

// SetVcpu adds the vcpu to the search compute params
func (o *SearchComputeParams) SetVcpu(vcpu *int32) {
	o.Vcpu = vcpu
}

// WriteToRequest writes these params to a swagger request
func (o *SearchComputeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CPUModel != nil {

		// query param cpuModel
		var qrCPUModel string

		if o.CPUModel != nil {
			qrCPUModel = *o.CPUModel
		}
		qCPUModel := qrCPUModel
		if qCPUModel != "" {

			if err := r.SetQueryParam("cpuModel", qCPUModel); err != nil {
				return err
			}
		}
	}

	if o.DataCenterID != nil {

		// query param dataCenterId
		var qrDataCenterID string

		if o.DataCenterID != nil {
			qrDataCenterID = *o.DataCenterID
		}
		qDataCenterID := qrDataCenterID
		if qDataCenterID != "" {

			if err := r.SetQueryParam("dataCenterId", qDataCenterID); err != nil {
				return err
			}
		}
	}

	if o.Gpu != nil {

		// query param gpu
		var qrGpu int32

		if o.Gpu != nil {
			qrGpu = *o.Gpu
		}
		qGpu := swag.FormatInt32(qrGpu)
		if qGpu != "" {

			if err := r.SetQueryParam("gpu", qGpu); err != nil {
				return err
			}
		}
	}

	if o.GpuModel != nil {

		// query param gpuModel
		var qrGpuModel string

		if o.GpuModel != nil {
			qrGpuModel = *o.GpuModel
		}
		qGpuModel := qrGpuModel
		if qGpuModel != "" {

			if err := r.SetQueryParam("gpuModel", qGpuModel); err != nil {
				return err
			}
		}
	}

	if o.MemoryGib != nil {

		// query param memoryGib
		var qrMemoryGib int32

		if o.MemoryGib != nil {
			qrMemoryGib = *o.MemoryGib
		}
		qMemoryGib := swag.FormatInt32(qrMemoryGib)
		if qMemoryGib != "" {

			if err := r.SetQueryParam("memoryGib", qMemoryGib); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param orderBy
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("orderBy", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.RegionID != nil {

		// query param regionId
		var qrRegionID string

		if o.RegionID != nil {
			qrRegionID = *o.RegionID
		}
		qRegionID := qrRegionID
		if qRegionID != "" {

			if err := r.SetQueryParam("regionId", qRegionID); err != nil {
				return err
			}
		}
	}

	if o.StorageGib != nil {

		// query param storageGib
		var qrStorageGib int32

		if o.StorageGib != nil {
			qrStorageGib = *o.StorageGib
		}
		qStorageGib := swag.FormatInt32(qrStorageGib)
		if qStorageGib != "" {

			if err := r.SetQueryParam("storageGib", qStorageGib); err != nil {
				return err
			}
		}
	}

	if o.Vcpu != nil {

		// query param vcpu
		var qrVcpu int32

		if o.Vcpu != nil {
			qrVcpu = *o.Vcpu
		}
		qVcpu := swag.FormatInt32(qrVcpu)
		if qVcpu != "" {

			if err := r.SetQueryParam("vcpu", qVcpu); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
