// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchDataCentersParams creates a new SearchDataCentersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchDataCentersParams() *SearchDataCentersParams {
	return &SearchDataCentersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchDataCentersParamsWithTimeout creates a new SearchDataCentersParams object
// with the ability to set a timeout on a request.
func NewSearchDataCentersParamsWithTimeout(timeout time.Duration) *SearchDataCentersParams {
	return &SearchDataCentersParams{
		timeout: timeout,
	}
}

// NewSearchDataCentersParamsWithContext creates a new SearchDataCentersParams object
// with the ability to set a context for a request.
func NewSearchDataCentersParamsWithContext(ctx context.Context) *SearchDataCentersParams {
	return &SearchDataCentersParams{
		Context: ctx,
	}
}

// NewSearchDataCentersParamsWithHTTPClient creates a new SearchDataCentersParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchDataCentersParamsWithHTTPClient(client *http.Client) *SearchDataCentersParams {
	return &SearchDataCentersParams{
		HTTPClient: client,
	}
}

/*
SearchDataCentersParams contains all the parameters to send to the API endpoint

	for the search data centers operation.

	Typically these are written to a http.Request.
*/
type SearchDataCentersParams struct {

	// RegionID.
	RegionID []string

	// RenewableEnergy.
	RenewableEnergy *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search data centers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDataCentersParams) WithDefaults() *SearchDataCentersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search data centers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDataCentersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search data centers params
func (o *SearchDataCentersParams) WithTimeout(timeout time.Duration) *SearchDataCentersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search data centers params
func (o *SearchDataCentersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search data centers params
func (o *SearchDataCentersParams) WithContext(ctx context.Context) *SearchDataCentersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search data centers params
func (o *SearchDataCentersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search data centers params
func (o *SearchDataCentersParams) WithHTTPClient(client *http.Client) *SearchDataCentersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search data centers params
func (o *SearchDataCentersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegionID adds the regionID to the search data centers params
func (o *SearchDataCentersParams) WithRegionID(regionID []string) *SearchDataCentersParams {
	o.SetRegionID(regionID)
	return o
}

// SetRegionID adds the regionId to the search data centers params
func (o *SearchDataCentersParams) SetRegionID(regionID []string) {
	o.RegionID = regionID
}

// WithRenewableEnergy adds the renewableEnergy to the search data centers params
func (o *SearchDataCentersParams) WithRenewableEnergy(renewableEnergy *bool) *SearchDataCentersParams {
	o.SetRenewableEnergy(renewableEnergy)
	return o
}

// SetRenewableEnergy adds the renewableEnergy to the search data centers params
func (o *SearchDataCentersParams) SetRenewableEnergy(renewableEnergy *bool) {
	o.RenewableEnergy = renewableEnergy
}

// WriteToRequest writes these params to a swagger request
func (o *SearchDataCentersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RegionID != nil {

		// binding items for regionId
		joinedRegionID := o.bindParamRegionID(reg)

		// query array param regionId
		if err := r.SetQueryParam("regionId", joinedRegionID...); err != nil {
			return err
		}
	}

	if o.RenewableEnergy != nil {

		// query param renewableEnergy
		var qrRenewableEnergy bool

		if o.RenewableEnergy != nil {
			qrRenewableEnergy = *o.RenewableEnergy
		}
		qRenewableEnergy := swag.FormatBool(qrRenewableEnergy)
		if qRenewableEnergy != "" {

			if err := r.SetQueryParam("renewableEnergy", qRenewableEnergy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchDataCenters binds the parameter regionId
func (o *SearchDataCentersParams) bindParamRegionID(formats strfmt.Registry) []string {
	regionIDIR := o.RegionID

	var regionIDIC []string
	for _, regionIDIIR := range regionIDIR { // explode []string

		regionIDIIV := regionIDIIR // string as string
		regionIDIC = append(regionIDIC, regionIDIIV)
	}

	// items.CollectionFormat: "multi"
	regionIDIS := swag.JoinByFormat(regionIDIC, "multi")

	return regionIDIS
}
