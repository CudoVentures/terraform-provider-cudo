// Code generated by go-swagger; DO NOT EDIT.

package data_centers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/CudoVentures/terraform-provider-cudo/internal/models"
)

// UpdateDataCenterReader is a Reader for the UpdateDataCenter structure.
type UpdateDataCenterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDataCenterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDataCenterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateDataCenterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateDataCenterOK creates a UpdateDataCenterOK with default headers values
func NewUpdateDataCenterOK() *UpdateDataCenterOK {
	return &UpdateDataCenterOK{}
}

/*
UpdateDataCenterOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateDataCenterOK struct {
	Payload *models.V1DataCenter
}

// IsSuccess returns true when this update data center o k response has a 2xx status code
func (o *UpdateDataCenterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update data center o k response has a 3xx status code
func (o *UpdateDataCenterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update data center o k response has a 4xx status code
func (o *UpdateDataCenterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update data center o k response has a 5xx status code
func (o *UpdateDataCenterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update data center o k response a status code equal to that given
func (o *UpdateDataCenterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update data center o k response
func (o *UpdateDataCenterOK) Code() int {
	return 200
}

func (o *UpdateDataCenterOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/data-centers/{dataCenter.id}][%d] updateDataCenterOK  %+v", 200, o.Payload)
}

func (o *UpdateDataCenterOK) String() string {
	return fmt.Sprintf("[PATCH /v1/data-centers/{dataCenter.id}][%d] updateDataCenterOK  %+v", 200, o.Payload)
}

func (o *UpdateDataCenterOK) GetPayload() *models.V1DataCenter {
	return o.Payload
}

func (o *UpdateDataCenterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1DataCenter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDataCenterDefault creates a UpdateDataCenterDefault with default headers values
func NewUpdateDataCenterDefault(code int) *UpdateDataCenterDefault {
	return &UpdateDataCenterDefault{
		_statusCode: code,
	}
}

/*
UpdateDataCenterDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpdateDataCenterDefault struct {
	_statusCode int

	Payload *models.Status
}

// IsSuccess returns true when this update data center default response has a 2xx status code
func (o *UpdateDataCenterDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update data center default response has a 3xx status code
func (o *UpdateDataCenterDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update data center default response has a 4xx status code
func (o *UpdateDataCenterDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update data center default response has a 5xx status code
func (o *UpdateDataCenterDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update data center default response a status code equal to that given
func (o *UpdateDataCenterDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update data center default response
func (o *UpdateDataCenterDefault) Code() int {
	return o._statusCode
}

func (o *UpdateDataCenterDefault) Error() string {
	return fmt.Sprintf("[PATCH /v1/data-centers/{dataCenter.id}][%d] UpdateDataCenter default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDataCenterDefault) String() string {
	return fmt.Sprintf("[PATCH /v1/data-centers/{dataCenter.id}][%d] UpdateDataCenter default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDataCenterDefault) GetPayload() *models.Status {
	return o.Payload
}

func (o *UpdateDataCenterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateDataCenterBody update data center body
swagger:model UpdateDataCenterBody
*/
type UpdateDataCenterBody struct {

	// create by
	// Read Only: true
	CreateBy string `json:"createBy,omitempty"`

	// lng lat
	LngLat *models.Point `json:"lngLat,omitempty"`

	// one frontend Id
	// Required: true
	OneFrontendID *string `json:"oneFrontendId"`

	// region Id
	RegionID string `json:"regionId,omitempty"`

	// renewable energy
	RenewableEnergy bool `json:"renewableEnergy,omitempty"`

	// s3 endpoint
	// Required: true
	S3Endpoint *string `json:"s3Endpoint"`

	// supplier name
	SupplierName string `json:"supplierName,omitempty"`
}

// Validate validates this update data center body
func (o *UpdateDataCenterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLngLat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOneFrontendID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateS3Endpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDataCenterBody) validateLngLat(formats strfmt.Registry) error {
	if swag.IsZero(o.LngLat) { // not required
		return nil
	}

	if o.LngLat != nil {
		if err := o.LngLat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataCenter" + "." + "lngLat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataCenter" + "." + "lngLat")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateDataCenterBody) validateOneFrontendID(formats strfmt.Registry) error {

	if err := validate.Required("dataCenter"+"."+"oneFrontendId", "body", o.OneFrontendID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDataCenterBody) validateS3Endpoint(formats strfmt.Registry) error {

	if err := validate.Required("dataCenter"+"."+"s3Endpoint", "body", o.S3Endpoint); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update data center body based on the context it is used
func (o *UpdateDataCenterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreateBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLngLat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDataCenterBody) contextValidateCreateBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dataCenter"+"."+"createBy", "body", string(o.CreateBy)); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDataCenterBody) contextValidateLngLat(ctx context.Context, formats strfmt.Registry) error {

	if o.LngLat != nil {

		if swag.IsZero(o.LngLat) { // not required
			return nil
		}

		if err := o.LngLat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataCenter" + "." + "lngLat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataCenter" + "." + "lngLat")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDataCenterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDataCenterBody) UnmarshalBinary(b []byte) error {
	var res UpdateDataCenterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
