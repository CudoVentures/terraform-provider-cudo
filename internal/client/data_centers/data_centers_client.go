// Code generated by go-swagger; DO NOT EDIT.

package data_centers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new data centers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data centers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CountHosts(params *CountHostsParams, opts ...ClientOption) (*CountHostsOK, error)

	CreateDataCenter(params *CreateDataCenterParams, opts ...ClientOption) (*CreateDataCenterOK, error)

	DeleteDataCenter(params *DeleteDataCenterParams, opts ...ClientOption) (*DeleteDataCenterOK, error)

	GetDataCenter(params *GetDataCenterParams, opts ...ClientOption) (*GetDataCenterOK, error)

	GetDataCenterLiveUtilization(params *GetDataCenterLiveUtilizationParams, opts ...ClientOption) (*GetDataCenterLiveUtilizationOK, error)

	GetDataCenterRevenueByResource(params *GetDataCenterRevenueByResourceParams, opts ...ClientOption) (*GetDataCenterRevenueByResourceOK, error)

	GetDataCenterRevenueTimeSeries(params *GetDataCenterRevenueTimeSeriesParams, opts ...ClientOption) (*GetDataCenterRevenueTimeSeriesOK, error)

	ListClusters(params *ListClustersParams, opts ...ClientOption) (*ListClustersOK, error)

	ListDataCenters(params *ListDataCentersParams, opts ...ClientOption) (*ListDataCentersOK, error)

	ListHosts(params *ListHostsParams, opts ...ClientOption) (*ListHostsOK, error)

	UpdateDataCenter(params *UpdateDataCenterParams, opts ...ClientOption) (*UpdateDataCenterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CountHosts gets host count

Returns the number of hosts in a data center
*/
func (a *Client) CountHosts(params *CountHostsParams, opts ...ClientOption) (*CountHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CountHosts",
		Method:             "GET",
		PathPattern:        "/v1/data-centers/{dataCenterId}/host-count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CountHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CountHostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDataCenter creates data center

Creates a new data center
*/
func (a *Client) CreateDataCenter(params *CreateDataCenterParams, opts ...ClientOption) (*CreateDataCenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataCenterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataCenter",
		Method:             "POST",
		PathPattern:        "/v1/data-centers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataCenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataCenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDataCenterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDataCenter deletes data center

Deletes a data center
*/
func (a *Client) DeleteDataCenter(params *DeleteDataCenterParams, opts ...ClientOption) (*DeleteDataCenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataCenterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataCenter",
		Method:             "DELETE",
		PathPattern:        "/v1/data-centers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataCenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataCenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDataCenterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataCenter gets data center

Returns a data center
*/
func (a *Client) GetDataCenter(params *GetDataCenterParams, opts ...ClientOption) (*GetDataCenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataCenterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataCenter",
		Method:             "GET",
		PathPattern:        "/v1/data-centers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataCenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataCenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataCenterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataCenterLiveUtilization gets live utilization

Returns the live utilization of a data center
*/
func (a *Client) GetDataCenterLiveUtilization(params *GetDataCenterLiveUtilizationParams, opts ...ClientOption) (*GetDataCenterLiveUtilizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataCenterLiveUtilizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataCenterLiveUtilization",
		Method:             "GET",
		PathPattern:        "/v1/data-centers/{id}/live-utilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataCenterLiveUtilizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataCenterLiveUtilizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataCenterLiveUtilizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataCenterRevenueByResource gets revenue by resource

Returns the revenue of a data center by resource (CPU, Memory, Storage, etc.)
*/
func (a *Client) GetDataCenterRevenueByResource(params *GetDataCenterRevenueByResourceParams, opts ...ClientOption) (*GetDataCenterRevenueByResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataCenterRevenueByResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataCenterRevenueByResource",
		Method:             "GET",
		PathPattern:        "/v1/data-centers/{id}/revenue-by-resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataCenterRevenueByResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataCenterRevenueByResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataCenterRevenueByResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataCenterRevenueTimeSeries gets revenue time series

Returns the revenue of a data center over time
*/
func (a *Client) GetDataCenterRevenueTimeSeries(params *GetDataCenterRevenueTimeSeriesParams, opts ...ClientOption) (*GetDataCenterRevenueTimeSeriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataCenterRevenueTimeSeriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataCenterRevenueTimeSeries",
		Method:             "GET",
		PathPattern:        "/v1/data-centers/{id}/revenue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataCenterRevenueTimeSeriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataCenterRevenueTimeSeriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataCenterRevenueTimeSeriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListClusters lists clusters

Returns the clusters in a data center
*/
func (a *Client) ListClusters(params *ListClustersParams, opts ...ClientOption) (*ListClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListClusters",
		Method:             "GET",
		PathPattern:        "/v1/data-centers/{dataCenterId}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDataCenters lists data centers

Returns the data centers in an organization
*/
func (a *Client) ListDataCenters(params *ListDataCentersParams, opts ...ClientOption) (*ListDataCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDataCentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDataCenters",
		Method:             "GET",
		PathPattern:        "/v1/data-centers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDataCentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDataCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDataCentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListHosts lists hosts

Returns the hosts in a data center
*/
func (a *Client) ListHosts(params *ListHostsParams, opts ...ClientOption) (*ListHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListHosts",
		Method:             "GET",
		PathPattern:        "/v1/data-centers/{dataCenterId}/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListHostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDataCenter updates data center

Updates a data center
*/
func (a *Client) UpdateDataCenter(params *UpdateDataCenterParams, opts ...ClientOption) (*UpdateDataCenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataCenterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataCenter",
		Method:             "PATCH",
		PathPattern:        "/v1/data-centers/{dataCenter.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataCenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataCenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDataCenterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
