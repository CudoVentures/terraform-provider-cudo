// Code generated by go-swagger; DO NOT EDIT.

package disks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAttachStorageDiskParams creates a new AttachStorageDiskParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAttachStorageDiskParams() *AttachStorageDiskParams {
	return &AttachStorageDiskParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAttachStorageDiskParamsWithTimeout creates a new AttachStorageDiskParams object
// with the ability to set a timeout on a request.
func NewAttachStorageDiskParamsWithTimeout(timeout time.Duration) *AttachStorageDiskParams {
	return &AttachStorageDiskParams{
		timeout: timeout,
	}
}

// NewAttachStorageDiskParamsWithContext creates a new AttachStorageDiskParams object
// with the ability to set a context for a request.
func NewAttachStorageDiskParamsWithContext(ctx context.Context) *AttachStorageDiskParams {
	return &AttachStorageDiskParams{
		Context: ctx,
	}
}

// NewAttachStorageDiskParamsWithHTTPClient creates a new AttachStorageDiskParams object
// with the ability to set a custom HTTPClient for a request.
func NewAttachStorageDiskParamsWithHTTPClient(client *http.Client) *AttachStorageDiskParams {
	return &AttachStorageDiskParams{
		HTTPClient: client,
	}
}

/*
AttachStorageDiskParams contains all the parameters to send to the API endpoint

	for the attach storage disk operation.

	Typically these are written to a http.Request.
*/
type AttachStorageDiskParams struct {

	// ID.
	ID string

	// ProjectID.
	ProjectID string

	// VMID.
	VMID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the attach storage disk params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AttachStorageDiskParams) WithDefaults() *AttachStorageDiskParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the attach storage disk params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AttachStorageDiskParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the attach storage disk params
func (o *AttachStorageDiskParams) WithTimeout(timeout time.Duration) *AttachStorageDiskParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the attach storage disk params
func (o *AttachStorageDiskParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the attach storage disk params
func (o *AttachStorageDiskParams) WithContext(ctx context.Context) *AttachStorageDiskParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the attach storage disk params
func (o *AttachStorageDiskParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the attach storage disk params
func (o *AttachStorageDiskParams) WithHTTPClient(client *http.Client) *AttachStorageDiskParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the attach storage disk params
func (o *AttachStorageDiskParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the attach storage disk params
func (o *AttachStorageDiskParams) WithID(id string) *AttachStorageDiskParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the attach storage disk params
func (o *AttachStorageDiskParams) SetID(id string) {
	o.ID = id
}

// WithProjectID adds the projectID to the attach storage disk params
func (o *AttachStorageDiskParams) WithProjectID(projectID string) *AttachStorageDiskParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the attach storage disk params
func (o *AttachStorageDiskParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WithVMID adds the vMID to the attach storage disk params
func (o *AttachStorageDiskParams) WithVMID(vMID *string) *AttachStorageDiskParams {
	o.SetVMID(vMID)
	return o
}

// SetVMID adds the vmId to the attach storage disk params
func (o *AttachStorageDiskParams) SetVMID(vMID *string) {
	o.VMID = vMID
}

// WriteToRequest writes these params to a swagger request
func (o *AttachStorageDiskParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if o.VMID != nil {

		// query param vmId
		var qrVMID string

		if o.VMID != nil {
			qrVMID = *o.VMID
		}
		qVMID := qrVMID
		if qVMID != "" {

			if err := r.SetQueryParam("vmId", qVMID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
