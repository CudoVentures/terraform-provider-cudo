// Code generated by go-swagger; DO NOT EDIT.

package disks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/CudoVentures/terraform-provider-cudo/internal/models"
)

// CreateDiskSnapshotReader is a Reader for the CreateDiskSnapshot structure.
type CreateDiskSnapshotReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDiskSnapshotReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDiskSnapshotOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreateDiskSnapshotDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateDiskSnapshotOK creates a CreateDiskSnapshotOK with default headers values
func NewCreateDiskSnapshotOK() *CreateDiskSnapshotOK {
	return &CreateDiskSnapshotOK{}
}

/*
CreateDiskSnapshotOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateDiskSnapshotOK struct {
	Payload models.CreateDiskSnapshotResponse
}

// IsSuccess returns true when this create disk snapshot o k response has a 2xx status code
func (o *CreateDiskSnapshotOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create disk snapshot o k response has a 3xx status code
func (o *CreateDiskSnapshotOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create disk snapshot o k response has a 4xx status code
func (o *CreateDiskSnapshotOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create disk snapshot o k response has a 5xx status code
func (o *CreateDiskSnapshotOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create disk snapshot o k response a status code equal to that given
func (o *CreateDiskSnapshotOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create disk snapshot o k response
func (o *CreateDiskSnapshotOK) Code() int {
	return 200
}

func (o *CreateDiskSnapshotOK) Error() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/disks/{id}/snapshots][%d] createDiskSnapshotOK  %+v", 200, o.Payload)
}

func (o *CreateDiskSnapshotOK) String() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/disks/{id}/snapshots][%d] createDiskSnapshotOK  %+v", 200, o.Payload)
}

func (o *CreateDiskSnapshotOK) GetPayload() models.CreateDiskSnapshotResponse {
	return o.Payload
}

func (o *CreateDiskSnapshotOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDiskSnapshotDefault creates a CreateDiskSnapshotDefault with default headers values
func NewCreateDiskSnapshotDefault(code int) *CreateDiskSnapshotDefault {
	return &CreateDiskSnapshotDefault{
		_statusCode: code,
	}
}

/*
CreateDiskSnapshotDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type CreateDiskSnapshotDefault struct {
	_statusCode int

	Payload *models.Status
}

// IsSuccess returns true when this create disk snapshot default response has a 2xx status code
func (o *CreateDiskSnapshotDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create disk snapshot default response has a 3xx status code
func (o *CreateDiskSnapshotDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create disk snapshot default response has a 4xx status code
func (o *CreateDiskSnapshotDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create disk snapshot default response has a 5xx status code
func (o *CreateDiskSnapshotDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create disk snapshot default response a status code equal to that given
func (o *CreateDiskSnapshotDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create disk snapshot default response
func (o *CreateDiskSnapshotDefault) Code() int {
	return o._statusCode
}

func (o *CreateDiskSnapshotDefault) Error() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/disks/{id}/snapshots][%d] CreateDiskSnapshot default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDiskSnapshotDefault) String() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/disks/{id}/snapshots][%d] CreateDiskSnapshot default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDiskSnapshotDefault) GetPayload() *models.Status {
	return o.Payload
}

func (o *CreateDiskSnapshotDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateDiskSnapshotBody create disk snapshot body
swagger:model CreateDiskSnapshotBody
*/
type CreateDiskSnapshotBody struct {

	// snapshot Id
	// Required: true
	SnapshotID *string `json:"snapshotId"`

	// vm Id
	// Required: true
	VMID *string `json:"vmId"`
}

// Validate validates this create disk snapshot body
func (o *CreateDiskSnapshotBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVMID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDiskSnapshotBody) validateSnapshotID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"snapshotId", "body", o.SnapshotID); err != nil {
		return err
	}

	return nil
}

func (o *CreateDiskSnapshotBody) validateVMID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"vmId", "body", o.VMID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create disk snapshot body based on context it is used
func (o *CreateDiskSnapshotBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateDiskSnapshotBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDiskSnapshotBody) UnmarshalBinary(b []byte) error {
	var res CreateDiskSnapshotBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
