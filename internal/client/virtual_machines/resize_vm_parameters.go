// Code generated by go-swagger; DO NOT EDIT.

package virtual_machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewResizeVMParams creates a new ResizeVMParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewResizeVMParams() *ResizeVMParams {
	return &ResizeVMParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewResizeVMParamsWithTimeout creates a new ResizeVMParams object
// with the ability to set a timeout on a request.
func NewResizeVMParamsWithTimeout(timeout time.Duration) *ResizeVMParams {
	return &ResizeVMParams{
		timeout: timeout,
	}
}

// NewResizeVMParamsWithContext creates a new ResizeVMParams object
// with the ability to set a context for a request.
func NewResizeVMParamsWithContext(ctx context.Context) *ResizeVMParams {
	return &ResizeVMParams{
		Context: ctx,
	}
}

// NewResizeVMParamsWithHTTPClient creates a new ResizeVMParams object
// with the ability to set a custom HTTPClient for a request.
func NewResizeVMParamsWithHTTPClient(client *http.Client) *ResizeVMParams {
	return &ResizeVMParams{
		HTTPClient: client,
	}
}

/*
ResizeVMParams contains all the parameters to send to the API endpoint

	for the resize VM operation.

	Typically these are written to a http.Request.
*/
type ResizeVMParams struct {

	// ID.
	ID string

	// MemoryGib.
	//
	// Format: int64
	MemoryGib *int64

	// ProjectID.
	ProjectID string

	// Vcpus.
	//
	// Format: int64
	Vcpus *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the resize VM params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResizeVMParams) WithDefaults() *ResizeVMParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the resize VM params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ResizeVMParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the resize VM params
func (o *ResizeVMParams) WithTimeout(timeout time.Duration) *ResizeVMParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resize VM params
func (o *ResizeVMParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resize VM params
func (o *ResizeVMParams) WithContext(ctx context.Context) *ResizeVMParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resize VM params
func (o *ResizeVMParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resize VM params
func (o *ResizeVMParams) WithHTTPClient(client *http.Client) *ResizeVMParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resize VM params
func (o *ResizeVMParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the resize VM params
func (o *ResizeVMParams) WithID(id string) *ResizeVMParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the resize VM params
func (o *ResizeVMParams) SetID(id string) {
	o.ID = id
}

// WithMemoryGib adds the memoryGib to the resize VM params
func (o *ResizeVMParams) WithMemoryGib(memoryGib *int64) *ResizeVMParams {
	o.SetMemoryGib(memoryGib)
	return o
}

// SetMemoryGib adds the memoryGib to the resize VM params
func (o *ResizeVMParams) SetMemoryGib(memoryGib *int64) {
	o.MemoryGib = memoryGib
}

// WithProjectID adds the projectID to the resize VM params
func (o *ResizeVMParams) WithProjectID(projectID string) *ResizeVMParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the resize VM params
func (o *ResizeVMParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WithVcpus adds the vcpus to the resize VM params
func (o *ResizeVMParams) WithVcpus(vcpus *int64) *ResizeVMParams {
	o.SetVcpus(vcpus)
	return o
}

// SetVcpus adds the vcpus to the resize VM params
func (o *ResizeVMParams) SetVcpus(vcpus *int64) {
	o.Vcpus = vcpus
}

// WriteToRequest writes these params to a swagger request
func (o *ResizeVMParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.MemoryGib != nil {

		// query param memoryGib
		var qrMemoryGib int64

		if o.MemoryGib != nil {
			qrMemoryGib = *o.MemoryGib
		}
		qMemoryGib := swag.FormatInt64(qrMemoryGib)
		if qMemoryGib != "" {

			if err := r.SetQueryParam("memoryGib", qMemoryGib); err != nil {
				return err
			}
		}
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if o.Vcpus != nil {

		// query param vcpus
		var qrVcpus int64

		if o.Vcpus != nil {
			qrVcpus = *o.Vcpus
		}
		qVcpus := swag.FormatInt64(qrVcpus)
		if qVcpus != "" {

			if err := r.SetQueryParam("vcpus", qVcpus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
