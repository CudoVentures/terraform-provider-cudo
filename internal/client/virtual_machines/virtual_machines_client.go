// Code generated by go-swagger; DO NOT EDIT.

package virtual_machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual machines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual machines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CountInstances(params *CountInstancesParams, opts ...ClientOption) (*CountInstancesOK, error)

	GetInstance(params *GetInstanceParams, opts ...ClientOption) (*GetInstanceOK, error)

	GetVncConnectURL(params *GetVncConnectURLParams, opts ...ClientOption) (*GetVncConnectURLOK, error)

	ListInstances(params *ListInstancesParams, opts ...ClientOption) (*ListInstancesOK, error)

	MonitorInstance(params *MonitorInstanceParams, opts ...ClientOption) (*MonitorInstanceOK, error)

	RebootInstance(params *RebootInstanceParams, opts ...ClientOption) (*RebootInstanceOK, error)

	StartInstance(params *StartInstanceParams, opts ...ClientOption) (*StartInstanceOK, error)

	StopInstance(params *StopInstanceParams, opts ...ClientOption) (*StopInstanceOK, error)

	TerminateInstance(params *TerminateInstanceParams, opts ...ClientOption) (*TerminateInstanceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CountInstances counts
*/
func (a *Client) CountInstances(params *CountInstancesParams, opts ...ClientOption) (*CountInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCountInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CountInstances",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/instance-count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CountInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CountInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CountInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInstance gets
*/
func (a *Client) GetInstance(params *GetInstanceParams, opts ...ClientOption) (*GetInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInstance",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/instances/{instanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVncConnectURL vs n c
*/
func (a *Client) GetVncConnectURL(params *GetVncConnectURLParams, opts ...ClientOption) (*GetVncConnectURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVncConnectURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVncConnectUrl",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/instances/{instanceId}/vnc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVncConnectURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVncConnectURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVncConnectURLDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListInstances lists
*/
func (a *Client) ListInstances(params *ListInstancesParams, opts ...ClientOption) (*ListInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListInstances",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MonitorInstance monitors
*/
func (a *Client) MonitorInstance(params *MonitorInstanceParams, opts ...ClientOption) (*MonitorInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MonitorInstance",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/instances/{instanceId}/monitor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MonitorInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RebootInstance reboots
*/
func (a *Client) RebootInstance(params *RebootInstanceParams, opts ...ClientOption) (*RebootInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebootInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RebootInstance",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{projectId}/instances/{instanceId}/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RebootInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebootInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RebootInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartInstance starts
*/
func (a *Client) StartInstance(params *StartInstanceParams, opts ...ClientOption) (*StartInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartInstance",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/instances/{instanceId}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StopInstance stops
*/
func (a *Client) StopInstance(params *StopInstanceParams, opts ...ClientOption) (*StopInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopInstance",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/instances/{instanceId}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerminateInstance terminates
*/
func (a *Client) TerminateInstance(params *TerminateInstanceParams, opts ...ClientOption) (*TerminateInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerminateInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerminateInstance",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/instances/{instanceId}/terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TerminateInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerminateInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerminateInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
