// Code generated by go-swagger; DO NOT EDIT.

package virtual_machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetVncConnectURLParams creates a new GetVncConnectURLParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVncConnectURLParams() *GetVncConnectURLParams {
	return &GetVncConnectURLParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVncConnectURLParamsWithTimeout creates a new GetVncConnectURLParams object
// with the ability to set a timeout on a request.
func NewGetVncConnectURLParamsWithTimeout(timeout time.Duration) *GetVncConnectURLParams {
	return &GetVncConnectURLParams{
		timeout: timeout,
	}
}

// NewGetVncConnectURLParamsWithContext creates a new GetVncConnectURLParams object
// with the ability to set a context for a request.
func NewGetVncConnectURLParamsWithContext(ctx context.Context) *GetVncConnectURLParams {
	return &GetVncConnectURLParams{
		Context: ctx,
	}
}

// NewGetVncConnectURLParamsWithHTTPClient creates a new GetVncConnectURLParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVncConnectURLParamsWithHTTPClient(client *http.Client) *GetVncConnectURLParams {
	return &GetVncConnectURLParams{
		HTTPClient: client,
	}
}

/*
GetVncConnectURLParams contains all the parameters to send to the API endpoint

	for the get vnc connect Url operation.

	Typically these are written to a http.Request.
*/
type GetVncConnectURLParams struct {

	// ConnectionID.
	ConnectionID *string

	// InstanceID.
	InstanceID string

	// ProjectID.
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get vnc connect Url params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVncConnectURLParams) WithDefaults() *GetVncConnectURLParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get vnc connect Url params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVncConnectURLParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get vnc connect Url params
func (o *GetVncConnectURLParams) WithTimeout(timeout time.Duration) *GetVncConnectURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get vnc connect Url params
func (o *GetVncConnectURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get vnc connect Url params
func (o *GetVncConnectURLParams) WithContext(ctx context.Context) *GetVncConnectURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get vnc connect Url params
func (o *GetVncConnectURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get vnc connect Url params
func (o *GetVncConnectURLParams) WithHTTPClient(client *http.Client) *GetVncConnectURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get vnc connect Url params
func (o *GetVncConnectURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the get vnc connect Url params
func (o *GetVncConnectURLParams) WithConnectionID(connectionID *string) *GetVncConnectURLParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the get vnc connect Url params
func (o *GetVncConnectURLParams) SetConnectionID(connectionID *string) {
	o.ConnectionID = connectionID
}

// WithInstanceID adds the instanceID to the get vnc connect Url params
func (o *GetVncConnectURLParams) WithInstanceID(instanceID string) *GetVncConnectURLParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the get vnc connect Url params
func (o *GetVncConnectURLParams) SetInstanceID(instanceID string) {
	o.InstanceID = instanceID
}

// WithProjectID adds the projectID to the get vnc connect Url params
func (o *GetVncConnectURLParams) WithProjectID(projectID string) *GetVncConnectURLParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get vnc connect Url params
func (o *GetVncConnectURLParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *GetVncConnectURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConnectionID != nil {

		// query param connectionId
		var qrConnectionID string

		if o.ConnectionID != nil {
			qrConnectionID = *o.ConnectionID
		}
		qConnectionID := qrConnectionID
		if qConnectionID != "" {

			if err := r.SetQueryParam("connectionId", qConnectionID); err != nil {
				return err
			}
		}
	}

	// path param instanceId
	if err := r.SetPathParam("instanceId", o.InstanceID); err != nil {
		return err
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
