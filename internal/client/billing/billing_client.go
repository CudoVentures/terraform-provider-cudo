// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new billing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for billing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBillingAccount(params *CreateBillingAccountParams, opts ...ClientOption) (*CreateBillingAccountOK, error)

	DeleteBillingAccount(params *DeleteBillingAccountParams, opts ...ClientOption) (*DeleteBillingAccountOK, error)

	GetBillingAccount(params *GetBillingAccountParams, opts ...ClientOption) (*GetBillingAccountOK, error)

	GetBillingAccountDetails(params *GetBillingAccountDetailsParams, opts ...ClientOption) (*GetBillingAccountDetailsOK, error)

	GetBillingAccountPaymentMethods(params *GetBillingAccountPaymentMethodsParams, opts ...ClientOption) (*GetBillingAccountPaymentMethodsOK, error)

	GetBillingAccountSetupIntent(params *GetBillingAccountSetupIntentParams, opts ...ClientOption) (*GetBillingAccountSetupIntentOK, error)

	GetBillingAccountSpendDetails(params *GetBillingAccountSpendDetailsParams, opts ...ClientOption) (*GetBillingAccountSpendDetailsOK, error)

	GetBillingAccountStripeInvoices(params *GetBillingAccountStripeInvoicesParams, opts ...ClientOption) (*GetBillingAccountStripeInvoicesOK, error)

	ListBillingAccounts(params *ListBillingAccountsParams, opts ...ClientOption) (*ListBillingAccountsOK, error)

	ListOutstandingStripeInvoices(params *ListOutstandingStripeInvoicesParams, opts ...ClientOption) (*ListOutstandingStripeInvoicesOK, error)

	RemoveBillingAccountPaymentMethod(params *RemoveBillingAccountPaymentMethodParams, opts ...ClientOption) (*RemoveBillingAccountPaymentMethodOK, error)

	SetBillingAccountDefaultPaymentMethod(params *SetBillingAccountDefaultPaymentMethodParams, opts ...ClientOption) (*SetBillingAccountDefaultPaymentMethodOK, error)

	UpdateBillingAccount(params *UpdateBillingAccountParams, opts ...ClientOption) (*UpdateBillingAccountOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBillingAccount creates a billing account
*/
func (a *Client) CreateBillingAccount(params *CreateBillingAccountParams, opts ...ClientOption) (*CreateBillingAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBillingAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBillingAccount",
		Method:             "POST",
		PathPattern:        "/v1/billing-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBillingAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBillingAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateBillingAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBillingAccount deletes billing account
*/
func (a *Client) DeleteBillingAccount(params *DeleteBillingAccountParams, opts ...ClientOption) (*DeleteBillingAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBillingAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBillingAccount",
		Method:             "DELETE",
		PathPattern:        "/v1/billing-accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBillingAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBillingAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBillingAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBillingAccount gets a billing account
*/
func (a *Client) GetBillingAccount(params *GetBillingAccountParams, opts ...ClientOption) (*GetBillingAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillingAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBillingAccount",
		Method:             "GET",
		PathPattern:        "/v1/billing-accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBillingAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillingAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBillingAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBillingAccountDetails gets billing account details
*/
func (a *Client) GetBillingAccountDetails(params *GetBillingAccountDetailsParams, opts ...ClientOption) (*GetBillingAccountDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillingAccountDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBillingAccountDetails",
		Method:             "GET",
		PathPattern:        "/v1/billing-accounts/{id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBillingAccountDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillingAccountDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBillingAccountDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBillingAccountPaymentMethods gets payment methods
*/
func (a *Client) GetBillingAccountPaymentMethods(params *GetBillingAccountPaymentMethodsParams, opts ...ClientOption) (*GetBillingAccountPaymentMethodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillingAccountPaymentMethodsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBillingAccountPaymentMethods",
		Method:             "GET",
		PathPattern:        "/v1/billing-accounts/{id}/payment-methods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBillingAccountPaymentMethodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillingAccountPaymentMethodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBillingAccountPaymentMethodsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBillingAccountSetupIntent gets setup intent
*/
func (a *Client) GetBillingAccountSetupIntent(params *GetBillingAccountSetupIntentParams, opts ...ClientOption) (*GetBillingAccountSetupIntentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillingAccountSetupIntentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBillingAccountSetupIntent",
		Method:             "GET",
		PathPattern:        "/v1/billing-accounts/{id}/setup-intent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBillingAccountSetupIntentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillingAccountSetupIntentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBillingAccountSetupIntentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBillingAccountSpendDetails gets spend details
*/
func (a *Client) GetBillingAccountSpendDetails(params *GetBillingAccountSpendDetailsParams, opts ...ClientOption) (*GetBillingAccountSpendDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillingAccountSpendDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBillingAccountSpendDetails",
		Method:             "GET",
		PathPattern:        "/v1/billing-accounts/{billingAccountId}/spend/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBillingAccountSpendDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillingAccountSpendDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBillingAccountSpendDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBillingAccountStripeInvoices gets invoices
*/
func (a *Client) GetBillingAccountStripeInvoices(params *GetBillingAccountStripeInvoicesParams, opts ...ClientOption) (*GetBillingAccountStripeInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillingAccountStripeInvoicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBillingAccountStripeInvoices",
		Method:             "GET",
		PathPattern:        "/v1/billing-accounts/invoices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBillingAccountStripeInvoicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillingAccountStripeInvoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBillingAccountStripeInvoicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListBillingAccounts lists billing accounts
*/
func (a *Client) ListBillingAccounts(params *ListBillingAccountsParams, opts ...ClientOption) (*ListBillingAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBillingAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBillingAccounts",
		Method:             "GET",
		PathPattern:        "/v1/billing-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBillingAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBillingAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListBillingAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListOutstandingStripeInvoices gets outstanding invoices
*/
func (a *Client) ListOutstandingStripeInvoices(params *ListOutstandingStripeInvoicesParams, opts ...ClientOption) (*ListOutstandingStripeInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOutstandingStripeInvoicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListOutstandingStripeInvoices",
		Method:             "GET",
		PathPattern:        "/v1/billing-accounts/invoices/outstanding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOutstandingStripeInvoicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOutstandingStripeInvoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListOutstandingStripeInvoicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveBillingAccountPaymentMethod removes payment method
*/
func (a *Client) RemoveBillingAccountPaymentMethod(params *RemoveBillingAccountPaymentMethodParams, opts ...ClientOption) (*RemoveBillingAccountPaymentMethodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveBillingAccountPaymentMethodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveBillingAccountPaymentMethod",
		Method:             "DELETE",
		PathPattern:        "/v1/billing-accounts/{id}/payment-methods/{paymentMethodId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveBillingAccountPaymentMethodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveBillingAccountPaymentMethodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveBillingAccountPaymentMethodDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetBillingAccountDefaultPaymentMethod sets default payment method
*/
func (a *Client) SetBillingAccountDefaultPaymentMethod(params *SetBillingAccountDefaultPaymentMethodParams, opts ...ClientOption) (*SetBillingAccountDefaultPaymentMethodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBillingAccountDefaultPaymentMethodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SetBillingAccountDefaultPaymentMethod",
		Method:             "POST",
		PathPattern:        "/v1/billing-accounts/{id}/payment-methods/{paymentMethodId}/set-default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBillingAccountDefaultPaymentMethodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBillingAccountDefaultPaymentMethodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetBillingAccountDefaultPaymentMethodDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateBillingAccount updates billing account
*/
func (a *Client) UpdateBillingAccount(params *UpdateBillingAccountParams, opts ...ClientOption) (*UpdateBillingAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBillingAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBillingAccount",
		Method:             "PATCH",
		PathPattern:        "/v1/billing-accounts/{billingAccount.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBillingAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBillingAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateBillingAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
