// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/CudoVentures/terraform-provider-cudo/internal/models"
)

// GetBillingAccountSpendDetailsReader is a Reader for the GetBillingAccountSpendDetails structure.
type GetBillingAccountSpendDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBillingAccountSpendDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBillingAccountSpendDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetBillingAccountSpendDetailsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetBillingAccountSpendDetailsOK creates a GetBillingAccountSpendDetailsOK with default headers values
func NewGetBillingAccountSpendDetailsOK() *GetBillingAccountSpendDetailsOK {
	return &GetBillingAccountSpendDetailsOK{}
}

/*
GetBillingAccountSpendDetailsOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetBillingAccountSpendDetailsOK struct {
	Payload *models.GetBillingAccountSpendDetailsResponse
}

// IsSuccess returns true when this get billing account spend details o k response has a 2xx status code
func (o *GetBillingAccountSpendDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get billing account spend details o k response has a 3xx status code
func (o *GetBillingAccountSpendDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing account spend details o k response has a 4xx status code
func (o *GetBillingAccountSpendDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get billing account spend details o k response has a 5xx status code
func (o *GetBillingAccountSpendDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing account spend details o k response a status code equal to that given
func (o *GetBillingAccountSpendDetailsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get billing account spend details o k response
func (o *GetBillingAccountSpendDetailsOK) Code() int {
	return 200
}

func (o *GetBillingAccountSpendDetailsOK) Error() string {
	return fmt.Sprintf("[GET /v1/billing-accounts/{billingAccountId}/spend/details][%d] getBillingAccountSpendDetailsOK  %+v", 200, o.Payload)
}

func (o *GetBillingAccountSpendDetailsOK) String() string {
	return fmt.Sprintf("[GET /v1/billing-accounts/{billingAccountId}/spend/details][%d] getBillingAccountSpendDetailsOK  %+v", 200, o.Payload)
}

func (o *GetBillingAccountSpendDetailsOK) GetPayload() *models.GetBillingAccountSpendDetailsResponse {
	return o.Payload
}

func (o *GetBillingAccountSpendDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetBillingAccountSpendDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillingAccountSpendDetailsDefault creates a GetBillingAccountSpendDetailsDefault with default headers values
func NewGetBillingAccountSpendDetailsDefault(code int) *GetBillingAccountSpendDetailsDefault {
	return &GetBillingAccountSpendDetailsDefault{
		_statusCode: code,
	}
}

/*
GetBillingAccountSpendDetailsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetBillingAccountSpendDetailsDefault struct {
	_statusCode int

	Payload *models.Status
}

// IsSuccess returns true when this get billing account spend details default response has a 2xx status code
func (o *GetBillingAccountSpendDetailsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get billing account spend details default response has a 3xx status code
func (o *GetBillingAccountSpendDetailsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get billing account spend details default response has a 4xx status code
func (o *GetBillingAccountSpendDetailsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get billing account spend details default response has a 5xx status code
func (o *GetBillingAccountSpendDetailsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get billing account spend details default response a status code equal to that given
func (o *GetBillingAccountSpendDetailsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get billing account spend details default response
func (o *GetBillingAccountSpendDetailsDefault) Code() int {
	return o._statusCode
}

func (o *GetBillingAccountSpendDetailsDefault) Error() string {
	return fmt.Sprintf("[GET /v1/billing-accounts/{billingAccountId}/spend/details][%d] GetBillingAccountSpendDetails default  %+v", o._statusCode, o.Payload)
}

func (o *GetBillingAccountSpendDetailsDefault) String() string {
	return fmt.Sprintf("[GET /v1/billing-accounts/{billingAccountId}/spend/details][%d] GetBillingAccountSpendDetails default  %+v", o._statusCode, o.Payload)
}

func (o *GetBillingAccountSpendDetailsDefault) GetPayload() *models.Status {
	return o.Payload
}

func (o *GetBillingAccountSpendDetailsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
