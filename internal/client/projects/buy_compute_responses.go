// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/CudoVentures/terraform-provider-cudo/internal/models"
)

// BuyComputeReader is a Reader for the BuyCompute structure.
type BuyComputeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BuyComputeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBuyComputeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewBuyComputeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBuyComputeOK creates a BuyComputeOK with default headers values
func NewBuyComputeOK() *BuyComputeOK {
	return &BuyComputeOK{}
}

/*
	BuyComputeOK describes a response with status code 200, with default header values.

A successful response.
*/
type BuyComputeOK struct {
	Payload models.BuyComputeResponse
}

// IsSuccess returns true when this buy compute o k response has a 2xx status code
func (o *BuyComputeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this buy compute o k response has a 3xx status code
func (o *BuyComputeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this buy compute o k response has a 4xx status code
func (o *BuyComputeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this buy compute o k response has a 5xx status code
func (o *BuyComputeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this buy compute o k response a status code equal to that given
func (o *BuyComputeOK) IsCode(code int) bool {
	return code == 200
}

func (o *BuyComputeOK) Error() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/compute/{id}][%d] buyComputeOK  %+v", 200, o.Payload)
}

func (o *BuyComputeOK) String() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/compute/{id}][%d] buyComputeOK  %+v", 200, o.Payload)
}

func (o *BuyComputeOK) GetPayload() models.BuyComputeResponse {
	return o.Payload
}

func (o *BuyComputeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBuyComputeDefault creates a BuyComputeDefault with default headers values
func NewBuyComputeDefault(code int) *BuyComputeDefault {
	return &BuyComputeDefault{
		_statusCode: code,
	}
}

/*
	BuyComputeDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type BuyComputeDefault struct {
	_statusCode int

	Payload *models.Status
}

// Code gets the status code for the buy compute default response
func (o *BuyComputeDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this buy compute default response has a 2xx status code
func (o *BuyComputeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this buy compute default response has a 3xx status code
func (o *BuyComputeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this buy compute default response has a 4xx status code
func (o *BuyComputeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this buy compute default response has a 5xx status code
func (o *BuyComputeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this buy compute default response a status code equal to that given
func (o *BuyComputeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *BuyComputeDefault) Error() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/compute/{id}][%d] BuyCompute default  %+v", o._statusCode, o.Payload)
}

func (o *BuyComputeDefault) String() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/compute/{id}][%d] BuyCompute default  %+v", o._statusCode, o.Payload)
}

func (o *BuyComputeDefault) GetPayload() *models.Status {
	return o.Payload
}

func (o *BuyComputeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
BuyComputeBody buy compute body
swagger:model BuyComputeBody
*/
type BuyComputeBody struct {

	// boot disk
	BootDisk *models.Disk `json:"bootDisk,omitempty"`

	// custom Ssh keys
	CustomSSHKeys []string `json:"customSshKeys"`

	// gpu quantity
	GpuQuantity int32 `json:"gpuQuantity,omitempty"`

	// memory gib
	MemoryGib int32 `json:"memoryGib,omitempty"`

	// os Id
	OsID string `json:"osId,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// quantity
	Quantity int32 `json:"quantity,omitempty"`

	// ssh key source
	SSHKeySource *models.SSHKeySource `json:"sshKeySource,omitempty"`

	// start script
	StartScript string `json:"startScript,omitempty"`

	// vcpu
	Vcpu int32 `json:"vcpu,omitempty"`

	// vm Id
	VMID string `json:"vmId,omitempty"`
}

// Validate validates this buy compute body
func (o *BuyComputeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBootDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSSHKeySource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BuyComputeBody) validateBootDisk(formats strfmt.Registry) error {
	if swag.IsZero(o.BootDisk) { // not required
		return nil
	}

	if o.BootDisk != nil {
		if err := o.BootDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "bootDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "bootDisk")
			}
			return err
		}
	}

	return nil
}

func (o *BuyComputeBody) validateSSHKeySource(formats strfmt.Registry) error {
	if swag.IsZero(o.SSHKeySource) { // not required
		return nil
	}

	if o.SSHKeySource != nil {
		if err := o.SSHKeySource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "sshKeySource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "sshKeySource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this buy compute body based on the context it is used
func (o *BuyComputeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBootDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSSHKeySource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BuyComputeBody) contextValidateBootDisk(ctx context.Context, formats strfmt.Registry) error {

	if o.BootDisk != nil {
		if err := o.BootDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "bootDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "bootDisk")
			}
			return err
		}
	}

	return nil
}

func (o *BuyComputeBody) contextValidateSSHKeySource(ctx context.Context, formats strfmt.Registry) error {

	if o.SSHKeySource != nil {
		if err := o.SSHKeySource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "sshKeySource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "sshKeySource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BuyComputeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BuyComputeBody) UnmarshalBinary(b []byte) error {
	var res BuyComputeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
