// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListUserPermissionsParams creates a new ListUserPermissionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListUserPermissionsParams() *ListUserPermissionsParams {
	return &ListUserPermissionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListUserPermissionsParamsWithTimeout creates a new ListUserPermissionsParams object
// with the ability to set a timeout on a request.
func NewListUserPermissionsParamsWithTimeout(timeout time.Duration) *ListUserPermissionsParams {
	return &ListUserPermissionsParams{
		timeout: timeout,
	}
}

// NewListUserPermissionsParamsWithContext creates a new ListUserPermissionsParams object
// with the ability to set a context for a request.
func NewListUserPermissionsParamsWithContext(ctx context.Context) *ListUserPermissionsParams {
	return &ListUserPermissionsParams{
		Context: ctx,
	}
}

// NewListUserPermissionsParamsWithHTTPClient creates a new ListUserPermissionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListUserPermissionsParamsWithHTTPClient(client *http.Client) *ListUserPermissionsParams {
	return &ListUserPermissionsParams{
		HTTPClient: client,
	}
}

/*
ListUserPermissionsParams contains all the parameters to send to the API endpoint

	for the list user permissions operation.

	Typically these are written to a http.Request.
*/
type ListUserPermissionsParams struct {

	// BillingAccountID.
	BillingAccountID *string

	// DataCenterID.
	DataCenterID *string

	// ProjectID.
	ProjectID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list user permissions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListUserPermissionsParams) WithDefaults() *ListUserPermissionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list user permissions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListUserPermissionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list user permissions params
func (o *ListUserPermissionsParams) WithTimeout(timeout time.Duration) *ListUserPermissionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list user permissions params
func (o *ListUserPermissionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list user permissions params
func (o *ListUserPermissionsParams) WithContext(ctx context.Context) *ListUserPermissionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list user permissions params
func (o *ListUserPermissionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list user permissions params
func (o *ListUserPermissionsParams) WithHTTPClient(client *http.Client) *ListUserPermissionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list user permissions params
func (o *ListUserPermissionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBillingAccountID adds the billingAccountID to the list user permissions params
func (o *ListUserPermissionsParams) WithBillingAccountID(billingAccountID *string) *ListUserPermissionsParams {
	o.SetBillingAccountID(billingAccountID)
	return o
}

// SetBillingAccountID adds the billingAccountId to the list user permissions params
func (o *ListUserPermissionsParams) SetBillingAccountID(billingAccountID *string) {
	o.BillingAccountID = billingAccountID
}

// WithDataCenterID adds the dataCenterID to the list user permissions params
func (o *ListUserPermissionsParams) WithDataCenterID(dataCenterID *string) *ListUserPermissionsParams {
	o.SetDataCenterID(dataCenterID)
	return o
}

// SetDataCenterID adds the dataCenterId to the list user permissions params
func (o *ListUserPermissionsParams) SetDataCenterID(dataCenterID *string) {
	o.DataCenterID = dataCenterID
}

// WithProjectID adds the projectID to the list user permissions params
func (o *ListUserPermissionsParams) WithProjectID(projectID *string) *ListUserPermissionsParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the list user permissions params
func (o *ListUserPermissionsParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *ListUserPermissionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BillingAccountID != nil {

		// query param billingAccountId
		var qrBillingAccountID string

		if o.BillingAccountID != nil {
			qrBillingAccountID = *o.BillingAccountID
		}
		qBillingAccountID := qrBillingAccountID
		if qBillingAccountID != "" {

			if err := r.SetQueryParam("billingAccountId", qBillingAccountID); err != nil {
				return err
			}
		}
	}

	if o.DataCenterID != nil {

		// query param dataCenterId
		var qrDataCenterID string

		if o.DataCenterID != nil {
			qrDataCenterID = *o.DataCenterID
		}
		qDataCenterID := qrDataCenterID
		if qDataCenterID != "" {

			if err := r.SetQueryParam("dataCenterId", qDataCenterID); err != nil {
				return err
			}
		}
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
